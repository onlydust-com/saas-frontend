/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v1/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project details
         * @description Get the project if it is visible to the caller.
         */
        get: operations["getProject"];
        /**
         * Update project
         * @description Update project. The caller must be a leader of the project.
         */
        put: operations["updateProject"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/project-leader-invitations/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Accept invitation to lead a project
         * @description Accept invitation to lead a project
         */
        put: operations["acceptInvitationToLeadProject"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/project-claims/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Claim project
         * @description Claim project
         */
        put: operations["claimProject"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get caller profile
         * @description Get the whole user profile
         */
        get: operations["getMyProfile"];
        /**
         * Update caller profile
         * @description Set the provided user profile data
         */
        put: operations["replaceMyProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update caller profile
         * @description Update the provided user profile data
         */
        patch: operations["updateMyProfile"];
        trace?: never;
    };
    "/api/v1/me/payout-preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my payout preferences
         * @description Get my payout preferences
         */
        get: operations["getMyPayoutPreferences"];
        /**
         * Set my payout preference for a project
         * @description Set my payout preference for a project
         */
        put: operations["setMyPayoutPreferenceForProject"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notification-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get notification settings
         * @description Get notification settings
         */
        get: operations["getMyNotificationSettings"];
        /**
         * Put notification settings
         * @description Put notification settings
         */
        put: operations["putMyNotificationSettings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/hackathons/{hackathonId}/registrations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Register to an hackathon as a participant
         * @description Register to an hackathon as a participant
         */
        put: operations["registerToHackathon"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/committees/{committeeId}/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my committee assignment on project
         * @description Get my committee assignment on project
         */
        get: operations["getCommitteeAssignmentOnProject"];
        /**
         * Vote for committee assignment
         * @description Vote for committee assignment
         */
        put: operations["voteForCommitteeAssignment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/applications/{applicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update project application
         * @description Update application. Only the applicant can update its application.
         */
        put: operations["updateProjectApplication"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/committees/{committeeId}/projects/{projectId}/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Create/Update project application for committee
         * @description Create/Update project application for committee
         */
        put: operations["createUpdateApplicationForCommittee"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update billing profile type
         * @description Update billing profile type (allows to switch between self-employed and company types)
         */
        put: operations["updateBillingProfileType"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/payout-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payout info of the given billing profile
         * @description Get payout info of the given billing profile. Caller must be admin of the billing profile.
         */
        get: operations["getPayoutInfo"];
        /**
         * Set payout info of the given billing profile
         * @description Set payout info of the given billing profile. Caller must be an admin of the billing profile.
         */
        put: operations["setPayoutInfo"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/invoices/mandate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Accept or decline OnlyDust invoice mandate for billing profile */
        put: operations["acceptOrDeclineInvoiceMandate"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/enable": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Enable billing profile
         * @description Enable billing profile
         */
        put: operations["enableBillingProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/coworkers/{githubUserId}/role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update coworker role
         * @description Update coworker role. Caller must be an admin of the billing profile.
         */
        put: operations["updateCoworkerRole"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sponsors/{sponsorId}/unallocate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allocate a budget to a project
         * @description Unallocate some budget from a project
         */
        post: operations["unallocateBudgetFromProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sponsors/{sponsorId}/allocate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Allocate a budget to a project
         * @description Allocate a budget to a project
         */
        post: operations["allocateBudgetToProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all projects
         * @description Get the paginated list of all projects on the platform that are visible to the caller.
         */
        get: operations["getProjects"];
        put?: never;
        /**
         * Create project
         * @description Create new project. The caller must be a leader of the project.
         */
        post: operations["createProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project rewards
         * @description Get the list of all rewards granted from this project. Only project leaders can access this information.
         */
        get: operations["getProjectRewards"];
        put?: never;
        /**
         * Create reward
         * @description Create new reward. The caller must be a leader of the project.
         */
        post: operations["createReward"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewardable-items/other-works": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create and close issue for a user within the project and returns it as a rewardable item
         * @description Create and close issue for a user within the project and returns it as a rewardable item. The caller must be a leader of the project.
         */
        post: operations["addRewardableOtherWork"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewardable-items/other-pull-requests": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Index given pull request and returns it as a rewardable item
         * @description Index  pull request issue and returns it as a rewardable item. The caller must be a leader of the project.
         */
        post: operations["addRewardableOtherPullRequest"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewardable-items/other-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Index given issue and returns it as a rewardable item
         * @description Index given issue and returns it as a rewardable item. The caller must be a leader of the project.
         */
        post: operations["addRewardableOtherIssue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/contributors/{githubUserId}/hidden": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Hide contributor
         * @description Hide contributor. The caller must be a leader of the project.
         */
        post: operations["hideContributor"];
        /**
         * Show contributor
         * @description Show contributor. The caller must be a leader of the project.
         */
        delete: operations["showContributor"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/contributions/{contributionId}/unassign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unassign contribution from contributor
         * @description Unassign contribution from contributor. The caller must be a leader of the project.
         */
        post: operations["unassignContribution"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/logos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a project logo */
        post: operations["uploadProjectLogo"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/profile/avatar": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Upload a profile avatar */
        post: operations["uploadAvatar"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Evict data from caches and invalidate the tokens
         */
        post: operations["logoutMe"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/billing-profiles/{billingProfileId}/invitations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept or reject coworker invitation
         * @description Accept or reject coworker invitation. Caller must be the invited coworker.
         */
        post: operations["acceptOrRejectCoworkerInvitation"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply to become a project contributor
         * @description Apply on a project. This endpoint will comment on the given GitHub issue on behalf of the user and register its application internally.
         */
        post: operations["applyOnProject"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new billing profile
         * @description Create a new billing profile.
         */
        post: operations["createBillingProfile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/invoices/{invoiceId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Download invoice by id linked to given billing profile */
        get: operations["downloadInvoice"];
        put?: never;
        /** Upload an invoice linked to a given billing profile */
        post: operations["uploadInvoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/coworkers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get coworkers linked to given billing profile
         * @description Get coworkers linked to given billing profile. Caller must be admin of the billing profile.
         */
        get: operations["getCoworkers"];
        put?: never;
        /**
         * Invite coworker to given billing profile
         * @description Invite coworker to given billing profile. Caller must be admin of the billing profile.
         */
        post: operations["inviteCoworker"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/applications/{applicationId}/accept": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept an application
         * @description Accept an application. Only the project lead can accept an application. The issue will be assigned to the applicant on GitHub.
         */
        post: operations["acceptProjectApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/ignored-contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update project's ignored contributions
         * @description Update project's ignored contributions. The caller must be a leader of the project.
         */
        patch: operations["updateIgnoredContributions"];
        trace?: never;
    };
    "/api/v1/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get caller info
         * @description Get the caller info
         */
        get: operations["getMe"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch some caller info
         * @description Patch onboarding info of the caller
         */
        patch: operations["patchMe"];
        trace?: never;
    };
    "/api/v1/me/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get in-app notifications
         * @description Get in-app notifications
         */
        get: operations["getMyNotifications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch notifications status
         * @description Patch notifications status
         */
        patch: operations["patchMyNotificationsStatus"];
        trace?: never;
    };
    "/api/v1/me/notifications/all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Mark all unread in app notifications as read
         * @description Mark all unread in app notifications as read
         */
        patch: operations["markAllInAppNotificationsAsRead"];
        trace?: never;
    };
    "/api/v1/me/notification-settings/projects/{projectId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get notification settings
         * @description Get notification settings
         */
        get: operations["getMyNotificationSettingsForProject"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Patch notification settings for given project
         * @description Patch notification settings for given project. Only provided fields will be updated.
         */
        patch: operations["patchMyNotificationSettingsForProject"];
        trace?: never;
    };
    "/api/v2/users/{githubId}/contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's contributions
         * @description Get contributions of the user.
         */
        get: operations["getUserContributions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/ecosystems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ecosystems page */
        get: operations["getEcosystemsPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get API version information */
        get: operations["getAPIVersion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{githubId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Get the publicly available user profile
         */
        get: operations["getUserProfile"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{githubId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile stats
         * @description Get the publicly available user profile stats
         */
        get: operations["getUserProfileStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{githubId}/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile stats per languages
         * @description Get the publicly available user stats per languages, ordered by rank
         */
        get: operations["getUserProfileStatsPerLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/{githubId}/ecosystems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile stats per ecosystems
         * @description Get the publicly available user stats per ecosystems, ordered by rank
         */
        get: operations["getUserProfileStatsPerEcosystems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search contributors by login
         * @description Get the list of all contributors of the project's repos or provided repos who match the login input query. If not enough results are found, the search is extended to the 5 best matching github users (by login).
         */
        get: operations["searchContributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/login/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user profile
         * @description Get the publicly available user profile
         */
        get: operations["getUserProfileByLogin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sponsors/{sponsorId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sponsor data
         * @description Get sponsor data
         */
        get: operations["getSponsor"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/sponsors/{sponsorId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get the list of all transactions related to this sponsor */
        get: operations["getSponsorTransactionHistory"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/public-activity": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get latest public activity
         * @description Get latest public activity
         */
        get: operations["getPublicActivity"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project stats
         * @description Get some KPIs for the project
         */
        get: operations["getProjectStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewards/{rewardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project reward by reward Id
         * @description Get reward details from this project. Only project leaders can access this information.
         */
        get: operations["getProjectReward"];
        put?: never;
        post?: never;
        /**
         * Create reward
         * @description Create new reward. The caller must be a leader of the project.
         */
        delete: operations["cancelReward"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewards/{rewardId}/reward-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project reward items page by reward Id
         * @description Get reward items details from this project. Only project leaders can access this information.
         */
        get: operations["getProjectRewardItemsPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewardable-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get rewardable contributions of a user within the project
         * @description Get rewardable contributions of a user on a given project. The caller must be a leader of the project.
         */
        get: operations["getProjectRewardableContributions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/rewardable-items/all-completed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get ALL completed rewardable contributions of a user within the project
         * @description Get ALL (without pagination) completed rewardable contributions of a user within the project. The caller must be a leader of the project.
         */
        get: operations["getAllCompletedProjectRewardableContributions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/public-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project issues
         * @description Get paginated list of project issues
         */
        get: operations["getProjectPublicIssues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/insights/contributors/newcomers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project newcomers
         * @description Get the paginated list of all contributors that recently joined the project.
         */
        get: operations["getProjectNewcomers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/insights/contributors/most-actives": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project most active contributors
         * @description Get the paginated list of the most active contributors of the project.
         */
        get: operations["getProjectMostActiveContributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/insights/contributors/churned": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project churned contributors
         * @description Get the paginated list of all contributors that recently left the project.
         */
        get: operations["getProjectChurnedContributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/insights/contributions/staled": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project staled contributions
         * @description Get the paginated list of the staled contributions of the project.
         */
        get: operations["getProjectStaledContributions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/good-first-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project good first issues
         * @deprecated
         * @description Get paginated list of project good first issues
         */
        get: operations["getProjectGoodFirstIssues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all project contributors
         * @description Get the paginated list of all contributors of the project.
         */
        get: operations["getProjectContributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/contributions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all contributions of a project
         * @description Get contributions of a given project. The caller must be a leader of the project.
         */
        get: operations["getProjectContributions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/contributions/{contributionId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get contribution details
         * @description Get the details of a given contribution.
         */
        get: operations["getContribution"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/{projectId}/budgets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project budgets
         * @description Get the list of all budgets from this project. Only project leaders can access this information.
         */
        get: operations["getProjectBudgets"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/projects/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project details
         * @description Get the project if it is visible to the caller.
         */
        get: operations["getProjectBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/project-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all project categories
         * @description Get all project categories
         */
        get: operations["getAllProjectCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/programs/{programId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get program details
         * @description Get program details. Only program leaders can access this information.
         */
        get: operations["getProgram"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/programs/{programId}/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get program transactions
         * @description Get program transactions. Use Accept: text/csv header to get the response in CSV format. Only program leaders can access this information.
         */
        get: operations["getProgramTransactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/programs/{programId}/stats/transactions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get program transactions stats
         * @description Get program transactions stats grouped by month.  Only program leaders can access this information.
         */
        get: operations["getProgramTransactionsStats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get caller's rewards
         * @description Get the page of all rewards where the recipient is the caller
         */
        get: operations["getMyRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/rewards/{rewardId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my reward by reward Id
         * @description Get my reward details. Only authenticated user can access this information.
         */
        get: operations["getMyReward"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/rewards/{rewardId}/reward-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my reward items page by reward Id
         * @description Get my reward items details. Only authenticated user can access this information.
         */
        get: operations["getMyRewardItemsPage"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/rewarding-projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of projects the caller's been rewarded for
         * @description Get the list of projects the caller's been rewarded for
         */
        get: operations["getMyRewardingProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/reward-currencies": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of currencies the caller received rewards in
         * @description Get the list of currencies the caller received rewards in
         */
        get: operations["getMyRewardCurrencies"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/recommended-projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get some recommended projects for the caller
         * @description Get a paginated list of recommended projects for the caller
         */
        get: operations["getRecommendedProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/programs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my leaded programs
         * @description Get the list of programs the user is leading
         */
        get: operations["getMyPrograms"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/profile/github": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Update user's github profile data */
        get: operations["updateMyGithubProfileData"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/organizations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Github user's organizations
         * @description Search Github user's organizations for github user id
         */
        get: operations["searchGithubUserOrganizations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/onboarding": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the caller's onboarding completion
         * @description Get the caller's onboarding completion
         */
        get: operations["getOnboardingCompletion"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/notifications/count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get in-app notifications count
         * @description Get in-app notifications count
         */
        get: operations["getMyNotificationsCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/contributed-repos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of github repos the caller's contributed to
         * @description Get the list of github repos the caller's contributed to
         */
        get: operations["getMyContributedRepos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/contributed-projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of projects the caller's contributed to
         * @description Get the list of projects the caller's contributed to
         */
        get: operations["getMyContributedProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/committees/{committeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my committee assignments
         * @description Get my committee assignments
         */
        get: operations["getCommitteeAssignments"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/billing-profiles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get my billing profiles
         * @description Get my billing profiles
         */
        get: operations["getMyBillingProfiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all supported languages
         * @description Get all supported languages
         */
        get: operations["getAllLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/issues/{issueId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get issue
         * @description Get an issue by id.
         */
        get: operations["getIssue"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hackathons": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hackathons list
         * @description Get hackathons list
         */
        get: operations["getHackathons"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hackathons/{hackathonId}/project-issues": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hackathon issue counts per project
         * @description Get hackathon issue counts per project
         */
        get: operations["getHackathonIssues"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/hackathons/slug/{hackathonSlug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get hackathon by slug
         * @description Get hackathon by slug
         */
        get: operations["getHackathonBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all ecosystems */
        get: operations["getAllEcosystems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems/{ecosystemSlug}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all projects
         * @description Get the (soon to be paginated) list of all public projects on the platform.
         */
        get: operations["getEcosystemProjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems/{ecosystemSlug}/contributors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ecosystem contributors */
        get: operations["getEcosystemContributors"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems/slug/{slug}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ecosystem details by slug */
        get: operations["getEcosystemBySlug"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems/slug/{slug}/project-categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ecosystem categories page */
        get: operations["getEcosystemCategories"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/ecosystems/slug/{slug}/languages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get ecosystem languages page */
        get: operations["getEcosystemLanguages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/committees/{committeeId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get committee
         * @description Get committee
         */
        get: operations["getCommittee"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/committees/{committeeId}/projects/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get committee application
         * @description Get committee application
         */
        get: operations["getCommitteeApplication"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get billing profile by id
         * @description Get billing profile by id
         */
        get: operations["getBillingProfile"];
        put?: never;
        post?: never;
        /**
         * Delete billing profile by id
         * @description Delete billing profile by id
         */
        delete: operations["deleteBillingProfile"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/invoices": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get invoices linked to given billing profile */
        get: operations["getInvoices"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/invoiceable-rewards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get payable rewards linked to given billing profile
         * @description Get payable rewards linked to given billing profile
         */
        get: operations["getInvoiceableRewards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/invoice-preview": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Preview new invoice from selected reward ids and given a billing profile id
         * @description Preview new invoice from selected reward ids
         */
        get: operations["previewNewInvoiceForRewardIds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/banner": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get currently visible banner */
        get: operations["getBanner"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get applications of a project's issue or a user
         * @description Get the list of all applications in a project or by a user. At least one of the parameters projectId or applicantId must be provided. Only project leaders or applicants can access this information.
         */
        get: operations["getProjectsApplications"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/applications/{applicationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get application
         * @description Get the details of an application.  Only application's project's leaders or application's applicant can access this information.
         */
        get: operations["getProjectApplication"];
        put?: never;
        post?: never;
        /**
         * Delete application
         * @description Delete application. Only the applicant or the project lead can delete an application.
         */
        delete: operations["deleteProjectApplication"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/me/banners/{bannerId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Close a banner
         * @description Close a banner for the caller. Will mark the banner as closed for the caller. The banner won't be displayed anymore.
         */
        delete: operations["closeBanner"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/billing-profiles/{billingProfileId}/coworkers/{githubUserId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove coworker from billing profile
         * @description Remove a coworker (or cancel his invitation) from billing profile.  Caller must be an admin of the billing profile or the coworker being removed.
         */
        delete: operations["removeCoworker"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UpdateProjectResponse: {
            /** Format: uuid */
            projectId: string;
            projectSlug: string;
        };
        /** @description Error contract strongly inspired by JSON problem (rfc7807) specification */
        OnlyDustError: {
            /**
             * @description A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem.
             * @example Not enough credit.
             */
            message: string;
            /**
             * Format: int32
             * @description The HTTP status code generated by the origin server for this occurrence of the problem.
             * @example 400
             */
            status: number;
            /**
             * Format: uuid
             * @description The error id
             * @example 4f7c660e-6cf1-4424-b240-e630c4c19069
             */
            id: string;
        };
        ProjectRewardSettings: {
            /** @description Ignore pull requests by default */
            ignorePullRequests?: boolean;
            /** @description Ignore issues by default */
            ignoreIssues?: boolean;
            /** @description Ignore code reviews by default */
            ignoreCodeReviews?: boolean;
            /**
             * Format: date-time
             * @description Ignore contributions before this date by default
             */
            ignoreContributionsBefore?: string;
        };
        SimpleLink: {
            url: string;
            value?: string;
        };
        UpdateProjectRequest: {
            name: string;
            shortDescription: string;
            longDescription: string;
            moreInfos?: components["schemas"]["SimpleLink"][];
            isLookingForContributors: boolean;
            /** @description List of Github user ids to invite as project leads. All other project lead invitations will be removed. If empty, all project lead invitations will be removed. If null, no change will be made. It is allowed to add a new project lead invitation directly through this list. */
            inviteGithubUserIdsAsProjectLeads?: number[];
            /** @description List of project leads to keep. All other project leads will be removed. If empty, all project leads will be removed. If null, no change will be made. It is not allowed to add a new project lead directly through this list, as they must be invited first. */
            projectLeadsToKeep?: string[];
            /** @description Direct URL to project's logo image */
            logoUrl?: string;
            rewardSettings?: components["schemas"]["ProjectRewardSettings"];
            /** @description List of Github repos to include in the project. All other repos will be unlinked from the project. If empty, all repos will be unlinked from the project. If null, no change will be made. It is allowed to link a new repo directly through this list. */
            githubRepoIds?: number[];
            /** @description List of Ecosystem to link the project on. All other ecosystem will be unlinked from the project. If empty, all ecosystem will be unlinked from the project. If null, no change will be made. It is allowed to link a new ecosystem directly through this list. */
            ecosystemIds?: string[];
            /** @description List of categories to link the project on. All other categories will be unlinked from the project. If empty, all categories will be unlinked from the project. If null, no change will be made. It is allowed to link a new category directly through this list. */
            categoryIds?: string[];
            /** @description List of category suggestions to link the project on. All other category suggestions will be unlinked from the project. If empty, all category suggestions will be unlinked from the project. If null, no change will be made. */
            categorySuggestions?: string[];
        };
        ContactInformation: {
            /** @enum {string} */
            channel: "TELEGRAM" | "TWITTER" | "DISCORD" | "LINKEDIN" | "WHATSAPP";
            /** @example foobar@gmail.com */
            contact: string;
            /** @enum {string} */
            visibility: "public" | "private";
        };
        /** @description User profile updated */
        UserProfileUpdateRequest: {
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl?: string;
            contactEmail?: string;
            /**
             * @description User location as in Github profile
             * @example Paris, France
             */
            location?: string;
            /**
             * @description User bio as in Github profile
             * @example Contributing to awesome open source projects.
             */
            bio?: string;
            /** @description User website as in Github profile */
            website?: string;
            contacts?: components["schemas"]["ContactInformation"][];
            /** @enum {string} */
            joiningReason?: "CONTRIBUTOR" | "MAINTAINER";
            /** @enum {string} */
            joiningGoal?: "LEARN" | "CHALLENGE" | "EARN" | "NOTORIETY";
            /** @enum {string} */
            allocatedTimeToContribute?: "NONE" | "LESS_THAN_ONE_DAY" | "ONE_TO_THREE_DAYS" | "GREATER_THAN_THREE_DAYS";
            /** @description Whether the user is looking for a job or not */
            isLookingForAJob?: boolean;
            firstName?: string;
            lastName?: string;
            preferredLanguages?: string[];
            preferredCategories?: string[];
        };
        /** @description Payout preference */
        PayoutPreferenceRequest: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            projectId: string;
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            billingProfileId: string;
        };
        NotificationSettingPutRequest: {
            channels: ("EMAIL" | "SUMMARY_EMAIL" | "IN_APP")[];
            /** @enum {string} */
            category: "MAINTAINER_PROJECT_CONTRIBUTOR" | "MAINTAINER_PROJECT_PROGRAM" | "CONTRIBUTOR_REWARD" | "CONTRIBUTOR_PROJECT" | "KYC_KYB_BILLING_PROFILE";
        };
        NotificationSettingsPutRequest: {
            notificationSettings: components["schemas"]["NotificationSettingPutRequest"][];
        };
        VoteForCommitteeAssignmentRequest: {
            votes: components["schemas"]["VoteForCommitteeAssignmentRequestVotesInner"][];
        };
        VoteForCommitteeAssignmentRequestVotesInner: {
            /**
             * Format: uuid
             * @description OnlyDust committee criteria ID
             */
            criteriaId: string;
            /** Format: int32 */
            vote: number;
        };
        /** @description Application */
        ProjectApplicationUpdateRequest: {
            /** @description The applicant's motivation to work on the issue */
            motivation: string;
            /** @description The applicant's approach to solving the issue */
            problemSolvingApproach?: string;
        };
        CommitteeApplicationRequest: {
            answers: components["schemas"]["CommitteeProjectAnswerRequest"][];
        };
        CommitteeProjectAnswerRequest: {
            /** Format: uuid */
            questionId: string;
            answer?: string;
        };
        BillingProfileTypeRequest: {
            /** @enum {string} */
            type?: "INDIVIDUAL" | "COMPANY" | "SELF_EMPLOYED";
        };
        BillingProfilePayoutInfoRequest: {
            bankAccount?: components["schemas"]["BillingProfilePayoutInfoResponseBankAccount"];
            /**
             * @description ETH wallet address or ENS
             * @example vitalik.eth
             */
            ethWallet?: string;
            /** @example 655174969670325216845941694058677825196339598661 */
            optimismAddress?: string;
            /** @example 75207196270256502255817105782338151356265417433430019227322186911337803076837 */
            aptosAddress?: string;
            /** @example 2439033442758812591743487931341975388992437896497635559722035508737856161688 */
            starknetAddress?: string;
            /**
             * @description Stellar account public key, base-32 encoded
             * @example GBAIA5U6E3FSRUW55AXACIVGX2QR5JYAS74OWLED3S22EGXVYEHPLGPA
             */
            stellarAccountId?: string;
        };
        BillingProfilePayoutInfoResponseBankAccount: {
            /** @example DAAEFRPPCCT */
            bic?: string;
            /** @example FR5417569000301995586997O41 */
            number?: string;
        };
        InvoiceMandateRequest: {
            hasAcceptedInvoiceMandate: boolean;
        };
        BillingProfileEnableRequest: {
            enable: boolean;
        };
        UpdateCoworkerRoleRequest: {
            /** @enum {string} */
            role: "ADMIN" | "MEMBER";
        };
        /** @description Budget to allocate */
        AllocateRequest: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            projectId: string;
            amount: number;
            /**
             * Format: uuid
             * @description Currency ID
             */
            currencyId: string;
        };
        CreateProjectResponse: {
            /** Format: uuid */
            projectId: string;
            projectSlug: string;
        };
        CreateProjectRequest: {
            name: string;
            shortDescription: string;
            longDescription: string;
            moreInfos?: components["schemas"]["SimpleLink"][];
            isLookingForContributors: boolean;
            inviteGithubUserIdsAsProjectLeads: number[];
            githubRepoIds: number[];
            /** @description Direct URL to project's logo image */
            logoUrl?: string;
            ecosystemIds?: string[];
            /** @description List of categories to link the project on. */
            categoryIds?: string[];
            categorySuggestions?: string[];
        };
        CreateRewardResponse: {
            /**
             * Format: uuid
             * @description OnlyDust reward ID
             */
            id: string;
        };
        RewardItemRequest: {
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            id: string;
            /** Format: int64 */
            number: number;
            /** Format: int64 */
            repoId: number;
        };
        /** @description New reward */
        RewardRequest: {
            /**
             * Format: int64
             * @description Github user id to reward
             */
            recipientId: number;
            /** @description Currency amount */
            amount: number;
            /**
             * Format: uuid
             * @description Currency ID
             */
            currencyId: string;
            items: components["schemas"]["RewardItemRequest"][];
        };
        GithubUserResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
        };
        RewardableItemResponse: {
            /**
             * Format: int64
             * @description Either the issue number, the pull request number or the code review's pull request number
             */
            number: number;
            /** @description Either the issue id, the pull request id or the code review id */
            id: string;
            /** @description Id of the contribution (if any) related to this rewardable item. */
            contributionId?: string;
            title: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            completedAt?: string;
            /** @description The body of the contribution. */
            githubBody?: string;
            author?: components["schemas"]["GithubUserResponse"];
            repoName: string;
            /**
             * Format: int64
             * @description Github repo ID (databaseId)
             * @example 650626566
             */
            repoId: number;
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            /** Format: int32 */
            commitsCount?: number;
            /** Format: int32 */
            userCommitsCount?: number;
            /** Format: int32 */
            commentsCount?: number;
            /** @enum {string} */
            status: "OPEN" | "COMPLETED" | "CANCELLED" | "CLOSED" | "MERGED" | "DRAFT" | "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description True if the contribution is ignored in the project */
            ignored: boolean;
            htmlUrl: string;
        };
        /** @description Create issue */
        AddOtherWorkRequest: {
            /**
             * Format: int64
             * @description Github repo ID (databaseId)
             * @example 650626566
             */
            githubRepoId: number;
            title: string;
            description: string;
        };
        /** @description Create issue */
        AddOtherPullRequestRequest: {
            githubPullRequestHtmlUrl?: string;
        };
        /** @description Create issue */
        AddOtherIssueRequest: {
            githubIssueHtmlUrl: string;
        };
        UploadImageResponse: {
            /** @description The direct URL to the uploaded image */
            url?: string;
        };
        BillingProfileCoworkerInvitationUpdateRequest: {
            /** @description True if the invitation is accepted */
            accepted: boolean;
        };
        ProjectApplicationCreateResponse: {
            /**
             * Format: uuid
             * @description Application ID
             */
            id: string;
        };
        /** @description Application */
        ProjectApplicationCreateRequest: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            projectId: string;
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            issueId: number;
            /** @description The applicant's motivation to work on the issue */
            motivation: string;
            /** @description The applicant's approach to solving the issue */
            problemSolvingApproach?: string;
        };
        BillingProfileCreateResponse: {
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            id: string;
        };
        BillingProfileRequest: {
            name: string;
            /** @enum {string} */
            type: "INDIVIDUAL" | "COMPANY" | "SELF_EMPLOYED";
            /** @description List of project ids on which the billing profile will be selected for the caller */
            selectForProjects?: string[];
        };
        BillingProfileCoworkerInvitationRequest: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /** @enum {string} */
            role: "ADMIN" | "MEMBER";
        };
        UpdateProjectIgnoredContributionsRequest: {
            contributionsToIgnore?: string[];
            contributionsToUnignore?: string[];
        };
        /** @description Patched user info */
        PatchMeContract: {
            /** @description True if the user has accepted the latest version of terms and conditions */
            hasAcceptedTermsAndConditions?: boolean;
            /** @description True if the user has completed the mandatory onboarding steps */
            hasCompletedOnboarding?: boolean;
        };
        NotificationPatchRequest: {
            /**
             * Format: uuid
             * @description Notification ID
             */
            id: string;
            /** @enum {string} */
            status: "UNREAD" | "READ";
        };
        /** @description Notifications patches */
        NotificationsPatchRequest: {
            notifications?: components["schemas"]["NotificationPatchRequest"][];
        };
        /** @description Notification settings for project */
        NotificationSettingsForProjectPatchRequest: {
            onGoodFirstIssueAdded?: boolean;
        };
        /** @description Related contributions */
        ContributionLinkResponse: {
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            repo: components["schemas"]["ShortGithubRepoResponse"];
            githubAuthor: components["schemas"]["GithubUserResponse"];
            /**
             * Format: int64
             * @description Github item number
             * @example 6
             */
            githubNumber: number;
            /** @enum {string} */
            githubStatus: "OPEN" | "COMPLETED" | "CANCELLED" | "CLOSED" | "MERGED" | "DRAFT" | "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description Github item title */
            githubTitle: string;
            /** @description The public Github URL of the contribution. */
            githubHtmlUrl: string;
            /** @description The body of the contribution. */
            githubBody?: string;
            /** @enum {string} */
            githubCodeReviewOutcome?: "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description True if the contribution is made by the same user */
            is_mine: boolean;
        };
        ContributionPageItemResponse: {
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            repo: components["schemas"]["ShortGithubRepoResponse"];
            githubAuthor: components["schemas"]["GithubUserResponse"];
            /**
             * Format: int64
             * @description Github item number
             * @example 6
             */
            githubNumber: number;
            /** @enum {string} */
            githubStatus: "OPEN" | "COMPLETED" | "CANCELLED" | "CLOSED" | "MERGED" | "DRAFT" | "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description Github item title */
            githubTitle: string;
            /** @description The public Github URL of the contribution. */
            githubHtmlUrl: string;
            /** @description The body of the contribution. */
            githubBody?: string;
            /** @enum {string} */
            githubCodeReviewOutcome?: "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description The contribution ID is determined from its content's ID (ie PR / issue / code review ID) */
            id: string;
            /**
             * Format: date-time
             * @description When the contribution was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the contribution was completed
             */
            completedAt?: string;
            /**
             * Format: date-time
             * @description When the contribution was last updated
             */
            lastUpdatedAt: string;
            /** @enum {string} */
            status: "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            /** @enum {string} */
            githubPullRequestReviewState?: "PENDING_REVIEWER" | "UNDER_REVIEW" | "APPROVED" | "CHANGES_REQUESTED";
            /** @description Rewards granted for this contribution */
            rewardIds: string[];
            project: components["schemas"]["ProjectShortResponse"];
            contributor: components["schemas"]["ContributorResponse"];
            /** @description Related contributions */
            links: components["schemas"]["ContributionLinkResponse"][];
        };
        ContributionPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            contributions: components["schemas"]["ContributionPageItemResponse"][];
        };
        ContributorResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
        };
        LanguageResponse: {
            /**
             * Format: uuid
             * @description OnlyDust language ID
             */
            id: string;
            /** @description OnlyDust language slug */
            slug: string;
            /**
             * @description Language name
             * @example Rust
             */
            name: string;
            /**
             * @description Direct URL to language's logo image
             * @example https://rust.org/logo.png
             */
            logoUrl: string;
            /**
             * @description Direct URL to language's banner image
             * @example https://rust.org/banner.png
             */
            bannerUrl?: string;
        };
        ProjectShortResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
            /** @example A short project description */
            shortDescription: string;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
            languages: components["schemas"]["LanguageResponse"][];
        };
        ShortGithubRepoResponse: {
            /**
             * Format: int64
             * @description Github repo ID (databaseId)
             * @example 650626566
             */
            id: number;
            /**
             * @description Repo owner on Github
             * @example onlydustxyz
             */
            owner: string;
            /**
             * @description Repo name on Github
             * @example marketplace-backend
             */
            name: string;
            /**
             * @description Repo description on Github
             * @example Awesome repo
             */
            description?: string;
            /**
             * @description The public Github URL of the repo
             * @example https://github.com/onlydustxyz/marketplace-backend
             */
            htmlUrl: string;
        };
        EcosystemBanner: {
            /** Format: uri */
            url: string;
            /** @enum {string} */
            fontColor: "DARK" | "LIGHT";
        };
        EcosystemPageItemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust ecosystem ID
             */
            id: string;
            /**
             * @description OnlyDust ecosystem pretty ID that is computed from its name. This ID CAN change over time.
             * @example zama
             */
            slug: string;
            /**
             * @description Ecosystem name
             * @example Ethereum Foundation
             */
            name: string;
            /**
             * @description Ecosystem description
             * @example A short ecosystem description
             */
            description: string;
            banners: components["schemas"]["EcosystemShortResponseBanners"];
            topProjects: components["schemas"]["ProjectLinkResponse"][];
            /**
             * Format: int32
             * @description Number of projects within the ecosystem
             * @example 2
             */
            projectCount: number;
            topProjectCategories?: components["schemas"]["ProjectCategoryResponse"][];
            /**
             * Format: int32
             * @description Number of project categories within the ecosystem
             * @example 2
             */
            projectCategoryCount?: number;
        };
        EcosystemPageV2: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            ecosystems: components["schemas"]["EcosystemPageItemResponse"][];
        };
        EcosystemShortResponseBanners: {
            xl: components["schemas"]["EcosystemBanner"];
            md: components["schemas"]["EcosystemBanner"];
        };
        ProjectCategoryResponse: {
            /** Format: uuid */
            id: string;
            /** @description OnlyDust project category pretty ID that is computed from its name. */
            slug: string;
            name: string;
            description: string;
            iconSlug: string;
        };
        ProjectLinkResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
        };
        GetAPIVersion200Response: {
            /** Format: date-time */
            releaseDate?: string;
        };
        EcosystemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust ecosystem ID
             */
            id: string;
            /**
             * @description Ecosystem name
             * @example Ethereum Foundation
             */
            name: string;
            /**
             * @description URL of ecosystem's website
             * @example https://ethereum.org
             */
            url: string;
            /**
             * @description Direct URL to ecosystem's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png
             */
            logoUrl: string;
            /**
             * @description Direct URL to ecosystem's banner image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png
             */
            bannerUrl?: string;
            /**
             * @description OnlyDust ecosystem pretty ID that is computed from its name. This ID CAN change over time.
             * @example zama
             */
            slug: string;
        };
        PublicUserProfileResponseV2: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /**
             * Format: uuid
             * @description OnlyDust user ID
             */
            id?: string;
            /** Format: uri */
            htmlUrl?: string;
            /**
             * @description User location as in Github profile
             * @example Paris, France
             */
            location?: string;
            /**
             * @description User bio as in Github profile
             * @example Contributing to awesome open source projects.
             */
            bio?: string;
            /** @description User website as in Github profile */
            website?: string;
            /**
             * Format: date-time
             * @description When the user signed up on Github
             */
            signedUpOnGithubAt?: string;
            /**
             * Format: date-time
             * @description When the user signed up on OnlyDust
             */
            signedUpAt?: string;
            /**
             * Format: date-time
             * @description The last time the user signed in on OnlyDust
             */
            lastSeenAt?: string;
            contacts?: components["schemas"]["ContactInformation"][];
            statsSummary?: components["schemas"]["UserProfileStatsSummary"];
            /** @description List of ecosystems on which the user contributed */
            ecosystems?: components["schemas"]["EcosystemResponse"][];
        };
        UserProfileStatsSummary: {
            /**
             * Format: int32
             * @description User rank on OnlyDust (the lower, the better)
             * @example 42
             */
            rank: number;
            /**
             * @description User rank percentile between 0 and 100 on OnlyDust (the lower, the better)
             * @example 10
             */
            rankPercentile: number;
            /** @enum {string} */
            rankCategory: "A" | "B" | "C" | "D" | "E" | "F";
            /**
             * Format: int32
             * @description Number of projects on which the user contributed
             * @example 22
             */
            contributedProjectCount: number;
            /**
             * Format: int32
             * @description Number of projects the user leads
             * @example 3
             */
            leadedProjectCount: number;
            /**
             * Format: int32
             * @description Total number of contributions made by the user within OnlyDust projects
             * @example 145
             */
            contributionCount: number;
            /**
             * Format: int32
             * @description Total number of rewards received by the user
             * @example 44
             */
            rewardCount: number;
        };
        UserProfileProjectEarnings: {
            projectName: string;
            totalEarnedUsd: number;
        };
        UserProfileStatsV2: {
            activity: components["schemas"]["UserWeeklyStats"][];
            earnings: components["schemas"]["UserProfileStatsV2Earnings"];
            workDistribution: components["schemas"]["UserWorkDistribution"];
        };
        UserProfileStatsV2Earnings: {
            totalEarnedUsd: number;
            perProject: components["schemas"]["UserProfileProjectEarnings"][];
        };
        UserWeeklyStats: {
            /**
             * Format: int32
             * @example 2023
             */
            year: number;
            /**
             * Format: int32
             * @example 34
             */
            week: number;
            /** Format: int32 */
            codeReviewCount: number;
            /** Format: int32 */
            issueCount: number;
            /** Format: int32 */
            pullRequestCount: number;
            /** Format: int32 */
            rewardCount: number;
        };
        UserWorkDistribution: {
            /** Format: int32 */
            codeReviewCount: number;
            /** Format: int32 */
            issueCount: number;
            /** Format: int32 */
            pullRequestCount: number;
        };
        UserProfileLanguagePage: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            languages: components["schemas"]["UserProfileLanguagePageItem"][];
        };
        UserProfileLanguagePageItem: {
            /**
             * Format: int32
             * @description User rank on this project (the lower, the better)
             * @example 42
             */
            rank?: number;
            /** @enum {string} */
            contributingStatus: "RED" | "ORANGE" | "GREEN";
            /**
             * Format: int32
             * @description Number of projects on which the user contributed in this language
             * @example 22
             */
            contributedProjectCount: number;
            /**
             * Format: int32
             * @description Total number of contributions made by the user in this language
             * @example 145
             */
            contributionCount: number;
            /**
             * Format: int32
             * @description Total number of rewards received by the user granted on contributions in this language
             * @example 44
             */
            rewardCount: number;
            /**
             * @description Total USD-equivalent amount of all rewards granted on contributions in this language
             * @example 25400
             */
            totalEarnedUsd: number;
            /** @description List of projects on which the user contributed in this language, ordered by contribution count */
            projects: components["schemas"]["ProjectLinkResponse"][];
            language: components["schemas"]["LanguageResponse"];
        };
        UserProfileEcosystemPage: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            ecosystems: components["schemas"]["UserProfileEcosystemPageItem"][];
        };
        UserProfileEcosystemPageItem: {
            /**
             * Format: int32
             * @description User rank on this project (the lower, the better)
             * @example 42
             */
            rank?: number;
            /** @enum {string} */
            contributingStatus: "RED" | "ORANGE" | "GREEN";
            /**
             * Format: int32
             * @description Number of projects on which the user contributed in this language
             * @example 22
             */
            contributedProjectCount: number;
            /**
             * Format: int32
             * @description Total number of contributions made by the user in this language
             * @example 145
             */
            contributionCount: number;
            /**
             * Format: int32
             * @description Total number of rewards received by the user granted on contributions in this language
             * @example 44
             */
            rewardCount: number;
            /**
             * @description Total USD-equivalent amount of all rewards granted on contributions in this language
             * @example 25400
             */
            totalEarnedUsd: number;
            /** @description List of projects on which the user contributed in this language, ordered by contribution count */
            projects: components["schemas"]["ProjectLinkResponse"][];
            ecosystem: components["schemas"]["EcosystemResponse"];
        };
        ContributorSearchResponse: {
            internalContributors?: components["schemas"]["ContributorResponse"][];
            externalContributors?: components["schemas"]["ContributorResponse"][];
        };
        /** @description Money value object */
        Money: {
            /**
             * @description Amount of money
             * @example 100
             */
            amount: number;
            prettyAmount: number;
            currency: components["schemas"]["ShortCurrencyResponse"];
            /**
             * @description USD equivalent of the amount
             * @example 100
             */
            usdEquivalent?: number;
            /**
             * @description USD conversion rate
             * @example 1.5
             */
            usdConversionRate?: number;
        };
        ProjectWithBudgetResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
            totalUsdBudget: number;
            remainingBudgets: components["schemas"]["Money"][];
        };
        /** @description Minimal information about a currency */
        ShortCurrencyResponse: {
            /**
             * Format: uuid
             * @description Currency ID
             */
            id: string;
            /** @example USDC */
            code: string;
            /** @example USD Coin */
            name: string;
            /** Format: uri */
            logoUrl?: string;
            /** Format: int32 */
            decimals: number;
        };
        SponsorDetailsResponse: {
            /**
             * Format: uuid
             * @description OnlyDust sponsor ID
             */
            id: string;
            /**
             * @description Sponsor name
             * @example Ethereum Foundation
             */
            name: string;
            /**
             * @description Direct URL to sponsor's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png
             */
            logoUrl: string;
            /**
             * @description URL of sponsor's website
             * @example https://ethereum.org
             */
            url: string;
            availableBudgets: components["schemas"]["Money"][];
            projects: components["schemas"]["ProjectWithBudgetResponse"][];
        };
        TransactionHistoryPageItemResponse: {
            /**
             * Format: uuid
             * @description Sponsor account transaction ID
             */
            id?: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            type: "DEPOSIT" | "WITHDRAWAL" | "ALLOCATION" | "UNALLOCATION";
            project?: components["schemas"]["ProjectLinkResponse"];
            amount: components["schemas"]["Money"];
        };
        TransactionHistoryPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            transactions: components["schemas"]["TransactionHistoryPageItemResponse"][];
        };
        NewMoney: {
            amount: number;
            currency: components["schemas"]["ShortCurrencyResponse"];
        };
        PublicActivityPageItemResponse: {
            /** @enum {string} */
            type: "PULL_REQUEST" | "REWARD_CREATED" | "REWARD_CLAIMED" | "PROJECT_CREATED";
            /** Format: date-time */
            timestamp: string;
            pullRequest?: components["schemas"]["PublicActivityPageItemResponsePullRequest"];
            rewardCreated?: components["schemas"]["PublicActivityPageItemResponseRewardCreated"];
            rewardClaimed?: components["schemas"]["PublicActivityPageItemResponseRewardCreated"];
            projectCreated?: components["schemas"]["PublicActivityPageItemResponseProjectCreated"];
        };
        PublicActivityPageItemResponseProjectCreated: {
            project: components["schemas"]["ProjectLinkResponse"];
            createdBy: components["schemas"]["GithubUserResponse"];
        };
        PublicActivityPageItemResponsePullRequest: {
            project: components["schemas"]["ProjectLinkResponse"];
            author: components["schemas"]["GithubUserResponse"];
        };
        PublicActivityPageItemResponseRewardCreated: {
            project: components["schemas"]["ProjectLinkResponse"];
            recipient: components["schemas"]["GithubUserResponse"];
            amount: components["schemas"]["NewMoney"];
        };
        PublicActivityPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            activities: components["schemas"]["PublicActivityPageItemResponse"][];
        };
        ProjectPageItemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            /** @example Verkle Tries */
            name: string;
            /** @example A short project description */
            shortDescription: string;
            /**
             * @description Direct URL to project's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
             */
            logoUrl?: string;
            /** @description Is the project currently hiring? */
            hiring: boolean;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
            /**
             * Format: int32
             * @description Number of github repositories included in the project
             * @example 2
             */
            repoCount: number;
            /**
             * Format: int32
             * @description Total number of contributors within the project
             * @example 163
             */
            contributorCount: number;
            /**
             * @description Remaining budget of the project in USD
             * @example 1223.4
             */
            remainingUsdBudget?: number;
            leaders: components["schemas"]["RegisteredUserResponse"][];
            ecosystems: components["schemas"]["EcosystemResponse"][];
            languages?: components["schemas"]["LanguageResponse"][];
            isInvitedAsProjectLead: boolean;
            hasMissingGithubAppInstallation?: boolean;
            tags?: ("HOT_COMMUNITY" | "NEWBIES_WELCOME" | "LIKELY_TO_REWARD" | "WORK_IN_PROGRESS" | "FAST_AND_FURIOUS" | "BIG_WHALE" | "UPDATED_ROADMAP" | "HAS_GOOD_FIRST_ISSUES")[];
        };
        ProjectPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            projects: components["schemas"]["ProjectPageItemResponse"][];
            languages?: components["schemas"]["LanguageResponse"][];
            ecosystems?: components["schemas"]["EcosystemResponse"][];
            categories?: components["schemas"]["ProjectCategoryResponse"][];
        };
        RegisteredUserResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /**
             * Format: uuid
             * @description OnlyDust user ID
             */
            id: string;
        };
        GithubOrganizationResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @example OnlyDust */
            name: string;
            /** Format: uri */
            htmlUrl?: string;
            /** @description Github repos linked to installed organization */
            repos: components["schemas"]["GithubRepoResponse"][];
            isCurrentUserAdmin: boolean;
            isPersonal?: boolean;
            /** Format: int64 */
            installationId?: number;
            /** @enum {string} */
            installationStatus: "NOT_INSTALLED" | "SUSPENDED" | "MISSING_PERMISSIONS" | "COMPLETE";
        };
        /** @description Github repos linked to installed organization */
        GithubRepoResponse: {
            /**
             * Format: int64
             * @description Github repo ID (databaseId)
             * @example 650626566
             */
            id: number;
            /**
             * @description Repo owner on Github
             * @example onlydustxyz
             */
            owner: string;
            /**
             * @description Repo name on Github
             * @example marketplace-backend
             */
            name: string;
            /**
             * @description Repo description on Github
             * @example Awesome repo
             */
            description?: string;
            /**
             * @description The public Github URL of the repo
             * @example https://github.com/onlydustxyz/marketplace-backend
             */
            htmlUrl: string;
            /**
             * Format: int32
             * @description Number of stars on Github
             * @example 625
             */
            stars?: number;
            /**
             * Format: int32
             * @description Fork count on Github
             * @example 3
             */
            forkCount?: number;
            /** @description Are issues enabled on Github for this repo */
            hasIssues?: boolean;
            /** @description Is the repo included in the project? */
            isIncludedInProject: boolean;
            /** @description Is the repo authorized in the Github app? */
            isAuthorizedInGithubApp?: boolean;
        };
        ProjectMeResponse: {
            /** @description Is the user a member of the project? */
            isMember?: boolean;
            /** @description Is the user a contributor of the project? */
            isContributor?: boolean;
            /** @description Is the user a project lead of the project? */
            isProjectLead?: boolean;
            /** @description Is the user invited as a project lead of the project? */
            isInvitedAsProjectLead?: boolean;
        };
        ProjectResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            /** @example Verkle Tries */
            name: string;
            /**
             * Format: date-time
             * @description When the project was created
             */
            createdAt: string;
            /** @example A short project description */
            shortDescription: string;
            /** @example A lonnnnnnnnnnnnng project description */
            longDescription: string;
            /**
             * @description Direct URL to project's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
             */
            logoUrl?: string;
            moreInfos: components["schemas"]["SimpleLink"][];
            /** @description Is the project currently hiring? */
            hiring: boolean;
            /** @enum {string} */
            visibility: "PUBLIC" | "PRIVATE";
            /**
             * Format: int32
             * @description Total number of contributors within the project
             * @example 163
             */
            contributorCount: number;
            /** @description The top 3 contributors (by contribution count) of this project */
            topContributors: components["schemas"]["GithubUserResponse"][];
            organizations?: components["schemas"]["GithubOrganizationResponse"][];
            leaders: components["schemas"]["RegisteredUserResponse"][];
            invitedLeaders: components["schemas"]["RegisteredUserResponse"][];
            ecosystems: components["schemas"]["EcosystemResponse"][];
            categories: components["schemas"]["ProjectCategoryResponse"][];
            categorySuggestions?: string[];
            sponsors?: components["schemas"]["SponsorResponse"][];
            languages: components["schemas"]["LanguageResponse"][];
            hasRemainingBudget: boolean;
            rewardSettings?: components["schemas"]["ProjectRewardSettings"];
            /** @description Is the project indexing complete? */
            indexingComplete: boolean;
            /**
             * Format: date-time
             * @description When the project was indexed
             */
            indexedAt: string;
            me?: components["schemas"]["ProjectMeResponse"];
            tags?: ("HOT_COMMUNITY" | "NEWBIES_WELCOME" | "LIKELY_TO_REWARD" | "WORK_IN_PROGRESS" | "FAST_AND_FURIOUS" | "BIG_WHALE" | "UPDATED_ROADMAP" | "HAS_GOOD_FIRST_ISSUES")[];
            /**
             * Format: int32
             * @description Number of good first issues in the project
             * @example 5
             */
            goodFirstIssueCount: number;
        };
        SponsorResponse: {
            /**
             * Format: uuid
             * @description OnlyDust sponsor ID
             */
            id: string;
            /**
             * @description Sponsor name
             * @example Ethereum Foundation
             */
            name: string;
            /**
             * @description Direct URL to sponsor's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/8506434858363286425.png
             */
            logoUrl: string;
            /**
             * @description URL of sponsor's website
             * @example https://ethereum.org
             */
            url: string;
        };
        /** @description Detailed total money value object */
        DetailedTotalMoney: {
            /**
             * @description USD equivalent of the total amount
             * @example 100
             */
            totalUsdEquivalent: number;
            /** @description Total amount by currency */
            totalPerCurrency?: components["schemas"]["Money"][];
        };
        ProjectStatsResponse: {
            /** Format: int32 */
            activeContributorCount: number;
            /** Format: int32 */
            mergedPrCount: number;
            /** Format: int32 */
            rewardCount: number;
            totalGranted: components["schemas"]["DetailedTotalMoney"];
            totalRewarded: components["schemas"]["DetailedTotalMoney"];
        };
        RewardPageItemResponse: {
            /** Format: date-time */
            requestedAt: string;
            /** Format: date-time */
            processedAt?: string;
            /** @enum {string} */
            status: "PENDING_SIGNUP" | "PENDING_CONTRIBUTOR" | "PENDING_BILLING_PROFILE" | "PENDING_COMPANY" | "PENDING_VERIFICATION" | "GEO_BLOCKED" | "INDIVIDUAL_LIMIT_REACHED" | "PAYOUT_INFO_MISSING" | "LOCKED" | "PENDING_REQUEST" | "PROCESSING" | "COMPLETE";
            /** Format: date-time */
            unlockDate?: string;
            amount: components["schemas"]["Money"];
            /**
             * Format: int32
             * @example 11
             */
            numberOfRewardedContributions: number;
            rewardedUser: components["schemas"]["ContributorResponse"];
            /**
             * Format: uuid
             * @description OnlyDust reward ID
             */
            id: string;
        };
        RewardsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            rewards: components["schemas"]["RewardPageItemResponse"][];
            remainingBudget?: components["schemas"]["DetailedTotalMoney"];
            spentAmount?: components["schemas"]["DetailedTotalMoney"];
            /**
             * Format: int32
             * @description Number of rewards that have been sent
             */
            sentRewardsCount?: number;
            /**
             * Format: int32
             * @description Number of contributions that have been rewarded
             */
            rewardedContributionsCount?: number;
            /**
             * Format: int32
             * @description Number of contributors that have been rewarded
             */
            rewardedContributorsCount?: number;
        };
        ReceiptResponse: {
            /** @enum {string} */
            type: "CRYPTO" | "FIAT";
            iban?: string;
            walletAddress?: string;
            ens?: string;
            transactionReference: string;
            /** Format: uri */
            transactionReferenceLink?: string;
        };
        RewardDetailsResponse: {
            /** Format: uuid */
            id: string;
            amount: components["schemas"]["Money"];
            /** @enum {string} */
            status: "PENDING_SIGNUP" | "PENDING_CONTRIBUTOR" | "PENDING_BILLING_PROFILE" | "PENDING_COMPANY" | "PENDING_VERIFICATION" | "GEO_BLOCKED" | "INDIVIDUAL_LIMIT_REACHED" | "PAYOUT_INFO_MISSING" | "LOCKED" | "PENDING_REQUEST" | "PROCESSING" | "COMPLETE";
            /** Format: date-time */
            unlockDate?: string;
            from: components["schemas"]["ContributorResponse"];
            to: components["schemas"]["ContributorResponse"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            processedAt?: string;
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            billingProfileId?: string;
            project: components["schemas"]["ProjectShortResponse"];
            receipt: components["schemas"]["ReceiptResponse"];
        };
        RewardItemResponse: {
            /** Format: int64 */
            number: number;
            id: string;
            /** @description Id of the contribution (if any) related to this reward item. */
            contributionId?: string;
            title: string;
            githubUrl: string;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            completedAt?: string;
            repoName: string;
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            /** Format: int32 */
            commitsCount?: number;
            /** Format: int32 */
            userCommitsCount?: number;
            /** Format: int32 */
            commentsCount?: number;
            /** @enum {string} */
            status: "OPEN" | "COMPLETED" | "CANCELLED" | "CLOSED" | "MERGED" | "DRAFT" | "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** Format: int64 */
            githubAuthorId?: number;
            authorLogin?: string;
            authorAvatarUrl?: string;
            authorGithubUrl?: string;
            /** @description The body of the contribution. */
            githubBody?: string;
        };
        RewardItemsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            rewardItems: components["schemas"]["RewardItemResponse"][];
        };
        RewardableItemsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            rewardableItems: components["schemas"]["RewardableItemResponse"][];
        };
        AllRewardableItemsResponse: {
            rewardableIssues: components["schemas"]["RewardableItemResponse"][];
            rewardablePullRequests: components["schemas"]["RewardableItemResponse"][];
            rewardableCodeReviews: components["schemas"]["RewardableItemResponse"][];
        };
        GithubIssuePageItemResponse: {
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            id: number;
            /**
             * Format: int64
             * @description Issue number
             * @example 6
             */
            number: number;
            /** @description Issue or pull request title on Github */
            title: string;
            /** @enum {string} */
            status: "OPEN" | "COMPLETED" | "CANCELLED";
            /** @description The public Github URL of the issue. */
            htmlUrl: string;
            repo: components["schemas"]["ShortGithubRepoResponse"];
            author: components["schemas"]["ContributorResponse"];
            /**
             * Format: date-time
             * @description When the issue was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the issue was cancelled or closed.
             */
            closedAt?: string;
            /** @description The body of the issue. */
            body?: string;
            /** @description The list of labels assigned to this issue */
            labels: components["schemas"]["GithubLabel"][];
            /** @description The list of applicants for this issue */
            applicants: components["schemas"]["GithubUserResponse"][];
            /** @description The list of assignees for this issue */
            assignees: components["schemas"]["GithubUserResponse"][];
            currentUserApplication?: components["schemas"]["ProjectApplicationShortResponse"];
        };
        GithubIssuePageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            issues: components["schemas"]["GithubIssuePageItemResponse"][];
        };
        /** @description The list of labels assigned to this issue */
        GithubLabel: {
            name: string;
            description?: string;
        };
        ProjectApplicationShortResponse: {
            /**
             * Format: uuid
             * @description Application ID
             */
            id: string;
            applicant: components["schemas"]["ContributorResponse"];
            project: components["schemas"]["ProjectLinkResponse"];
            /** @description The applicant's motivation to work on the issue */
            motivations: string;
            /** @description The applicant's approach to solving the issue */
            problemSolvingApproach?: string;
        };
        ProjectNewcomersPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /** @enum {string} */
            cover?: "MAGENTA" | "CYAN" | "BLUE" | "YELLOW";
            /**
             * @description User location as in Github profile
             * @example Paris, France
             */
            location?: string;
            /**
             * @description User bio as in Github profile
             * @example Contributing to awesome open source projects.
             */
            bio?: string;
            /**
             * Format: date-time
             * @description First contribution date to return if user not registered on OD
             */
            firstContributedAt?: string;
        };
        ProjectNewcomersPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            contributors: components["schemas"]["ProjectNewcomersPageItemResponse"][];
        };
        ProjectContributorActivityPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /** Format: int32 */
            completedPullRequestCount?: number;
            /** Format: int32 */
            completedIssueCount?: number;
            /** Format: int32 */
            completedCodeReviewCount?: number;
            contributionCountPerWeeks?: components["schemas"]["UserContributionStats"][];
        };
        ProjectContributorActivityPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            contributors: components["schemas"]["ProjectContributorActivityPageItemResponse"][];
        };
        UserContributionStats: {
            /**
             * Format: int32
             * @example 2023
             */
            year: number;
            /**
             * Format: int32
             * @example 34
             */
            week: number;
            /** Format: int32 */
            codeReviewCount: number;
            /** Format: int32 */
            issueCount: number;
            /** Format: int32 */
            pullRequestCount: number;
        };
        ProjectChurnedContributorsPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /** @enum {string} */
            cover?: "MAGENTA" | "CYAN" | "BLUE" | "YELLOW";
            lastContribution: components["schemas"]["ProjectChurnedContributorsPageItemResponseAllOfLastContribution"];
        };
        ProjectChurnedContributorsPageItemResponseAllOfLastContribution: {
            /**
             * @description Contribution ID
             * @example 2189e8dc91876fa1686e81b09de33ca7bdca08e80854d4cada02c8288cf03739
             */
            id: string;
            /** Format: date-time */
            completedAt: string;
            repo?: components["schemas"]["ShortGithubRepoResponse"];
        };
        ProjectChurnedContributorsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            contributors: components["schemas"]["ProjectChurnedContributorsPageItemResponse"][];
        };
        ContributorPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /**
             * Format: int32
             * @description Total number of contributions the contributor made on this project.
             * @example 22
             */
            contributionCount: number;
            /**
             * Format: int32
             * @description Total number of rewards the contributor got on this project.
             * @example 10
             */
            rewardCount: number;
            earned: components["schemas"]["RewardTotalAmountsResponse"];
            /**
             * Format: int32
             * @description Total number of contributions the contributor was not rewarded for on this project.
             * @example 9
             */
            contributionToRewardCount?: number;
            /**
             * Format: int32
             * @example 2
             */
            pullRequestToReward?: number;
            /**
             * Format: int32
             * @example 4
             */
            issueToReward?: number;
            /**
             * Format: int32
             * @example 3
             */
            codeReviewToReward?: number;
            /** @description Whether the contributor is hidden to the user */
            hidden?: boolean;
        };
        ContributorsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            /** @description Whether there are hidden contributors in the project for the current user */
            hasHiddenContributors: boolean;
            contributors: components["schemas"]["ContributorPageItemResponse"][];
        };
        RewardTotalAmountsResponse: {
            totalAmount?: number;
            details?: components["schemas"]["Money"][];
        };
        ContributionDetailsResponse: {
            /** @enum {string} */
            type: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
            repo: components["schemas"]["ShortGithubRepoResponse"];
            githubAuthor: components["schemas"]["GithubUserResponse"];
            /**
             * Format: int64
             * @description Github item number
             * @example 6
             */
            githubNumber: number;
            /** @enum {string} */
            githubStatus: "OPEN" | "COMPLETED" | "CANCELLED" | "CLOSED" | "MERGED" | "DRAFT" | "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description Github item title */
            githubTitle: string;
            /** @description The public Github URL of the contribution. */
            githubHtmlUrl: string;
            /** @description The body of the contribution. */
            githubBody?: string;
            /** @enum {string} */
            githubCodeReviewOutcome?: "PENDING" | "COMMENTED" | "APPROVED" | "CHANGES_REQUESTED" | "DISMISSED";
            /** @description The contribution ID is determined from its content's ID (ie PR / issue / code review ID) */
            id: string;
            contributor: components["schemas"]["ContributorResponse"];
            /**
             * Format: date-time
             * @description When the contribution was created
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the contribution was completed
             */
            completedAt?: string;
            /** @enum {string} */
            status: "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
            project: components["schemas"]["ProjectShortResponse"];
            /**
             * Format: int32
             * @description Number of comments on the contribution
             */
            commentsCount: number;
            /** Format: int32 */
            commitsCount?: number;
            /** Format: int32 */
            userCommitsCount?: number;
            /** @description Related contributions */
            links: components["schemas"]["ContributionLinkResponse"][];
            /** @enum {string} */
            githubPullRequestReviewState?: "PENDING_REVIEWER" | "UNDER_REVIEW" | "APPROVED" | "CHANGES_REQUESTED";
            /** @description Rewards granted for this contribution */
            rewards: components["schemas"]["RewardResponse"][];
        };
        /** @description Rewards granted for this contribution */
        RewardResponse: {
            /** Format: uuid */
            id: string;
            amount: components["schemas"]["Money"];
            /** @enum {string} */
            status: "PENDING_SIGNUP" | "PENDING_CONTRIBUTOR" | "PENDING_BILLING_PROFILE" | "PENDING_COMPANY" | "PENDING_VERIFICATION" | "GEO_BLOCKED" | "INDIVIDUAL_LIMIT_REACHED" | "PAYOUT_INFO_MISSING" | "LOCKED" | "PENDING_REQUEST" | "PROCESSING" | "COMPLETE";
            /** Format: date-time */
            unlockDate?: string;
            from: components["schemas"]["ContributorResponse"];
            to: components["schemas"]["ContributorResponse"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            processedAt?: string;
        };
        BudgetResponse: {
            currency: components["schemas"]["ShortCurrencyResponse"];
            initialAmount: number;
            remaining: number;
            remainingDollarsEquivalent?: number;
            initialDollarsEquivalent?: number;
            dollarsConversionRate?: number;
        };
        ProjectBudgetsResponse: {
            initialDollarsEquivalent?: number;
            remainingDollarsEquivalent?: number;
            budgets: components["schemas"]["BudgetResponse"][];
        };
        ProjectCategoriesResponse: {
            categories: components["schemas"]["ProjectCategoryResponse"][];
        };
        ProgramDetailsResponse: {
            /**
             * Format: uuid
             * @description OnlyDust program ID
             */
            id: string;
            /**
             * @description Program name
             * @example Starkware Exploration Team
             */
            name: string;
            totalAvailable: components["schemas"]["DetailedTotalMoney"];
            totalGranted: components["schemas"]["DetailedTotalMoney"];
            totalRewarded: components["schemas"]["DetailedTotalMoney"];
        };
        ProgramTransactionPageItemResponse: {
            /**
             * Format: uuid
             * @description Sponsor account transaction ID
             */
            id: string;
            /** Format: date-time */
            date: string;
            /** @enum {string} */
            type: "TRANSFER" | "REFUND";
            from?: components["schemas"]["ProgramTransactionPageItemResponseFrom"];
            to?: components["schemas"]["ProgramTransactionPageItemResponseFrom"];
            amount: components["schemas"]["Money"];
        };
        ProgramTransactionPageItemResponseFrom: Record<string, never>;
        ProgramTransactionPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            transactions: components["schemas"]["ProgramTransactionPageItemResponse"][];
        };
        ProgramTransactionStatsListResponse: {
            stats: components["schemas"]["ProgramTransactionStatsResponse"][];
        };
        ProgramTransactionStatsResponse: {
            /**
             * Format: date
             * @description Date of the transactions
             */
            date: string;
            totalAvailable: components["schemas"]["DetailedTotalMoney"];
            totalGranted: components["schemas"]["DetailedTotalMoney"];
            totalRewarded: components["schemas"]["DetailedTotalMoney"];
            /**
             * Format: int32
             * @description Number of transactions for this month
             * @example 42
             */
            transactionCount: number;
        };
        GetMeResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /**
             * Format: uuid
             * @description OnlyDust user ID
             */
            id: string;
            /** @description True if the user has accepted the latest version of terms and conditions */
            hasAcceptedLatestTermsAndConditions: boolean;
            /** @description True if the user is authorized to apply on Github issues */
            isAuthorizedToApplyOnGithubIssues?: boolean;
            projectsLed?: components["schemas"]["ProjectLinkResponse"][];
            pendingProjectsLed?: components["schemas"]["ProjectLinkResponse"][];
            pendingApplications?: components["schemas"]["ProjectApplicationShortResponse"][];
            /** @description True if the user is an OnlyDust admin */
            isAdmin: boolean;
            /** Format: date-time */
            createdAt: string;
            /** @description User email */
            email?: string;
            /** @description True if the user has not selected any billing profile for a project on which he has pending rewards. */
            missingPayoutPreference?: boolean;
            firstName?: string;
            lastName?: string;
            sponsors?: components["schemas"]["SponsorResponse"][];
            hasCompletedVerificationInformation: boolean;
            hasCompletedOnboarding: boolean;
        };
        MyRewardPageItemResponse: {
            /** Format: date-time */
            requestedAt: string;
            /** Format: date-time */
            processedAt?: string;
            /** Format: uuid */
            projectId: string;
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            billingProfileId?: string;
            /** @enum {string} */
            status: "PENDING_SIGNUP" | "PENDING_CONTRIBUTOR" | "PENDING_BILLING_PROFILE" | "PENDING_COMPANY" | "PENDING_VERIFICATION" | "GEO_BLOCKED" | "INDIVIDUAL_LIMIT_REACHED" | "PAYOUT_INFO_MISSING" | "LOCKED" | "PENDING_REQUEST" | "PROCESSING" | "COMPLETE";
            /** Format: date-time */
            unlockDate?: string;
            amount: components["schemas"]["Money"];
            /**
             * Format: int32
             * @example 11
             */
            numberOfRewardedContributions: number;
            /** @example Bretzel */
            rewardedOnProjectName: string;
            /** @example https://onlydust.xyz/cdn-cgi/image/width=100/https://onlydust-app-images.s3.eu-west-1.amazonaws.com/5003677688814069549.png */
            rewardedOnProjectLogoUrl: string;
            rewardedUser: components["schemas"]["ContributorResponse"];
            /**
             * Format: uuid
             * @description OnlyDust reward ID
             */
            id: string;
            networks?: ("SEPA" | "ETHEREUM" | "OPTIMISM" | "APTOS" | "STARKNET" | "STELLAR")[];
        };
        MyRewardsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            rewards: components["schemas"]["MyRewardPageItemResponse"][];
            rewardedAmount?: components["schemas"]["DetailedTotalMoney"];
            pendingAmount?: components["schemas"]["DetailedTotalMoney"];
            /**
             * Format: int32
             * @description Number of rewards that have been received
             */
            receivedRewardsCount?: number;
            /**
             * Format: int32
             * @description Number of contributions that have been rewarded
             */
            rewardedContributionsCount?: number;
            /**
             * Format: int32
             * @description Number of projects the user has been rewarded for
             */
            rewardingProjectsCount?: number;
            /**
             * Format: int32
             * @description Number of rewards at pending request status
             */
            pendingRequestCount?: number;
        };
        ProjectListResponse: {
            projects: components["schemas"]["ProjectShortResponse"][];
        };
        /** @description List of currencies */
        CurrencyListResponse: {
            currencies: components["schemas"]["ShortCurrencyResponse"][];
        };
        ProjectLinkWithDescriptionResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
            /** @example A short project description */
            shortDescription: string;
        };
        RecommendedProjectsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            projects: components["schemas"]["ProjectLinkWithDescriptionResponse"][];
        };
        ProgramPageItemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust program ID
             */
            id: string;
            /**
             * @description Program name
             * @example Starkware Exploration Team
             */
            name: string;
        };
        ProgramsPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            programs: components["schemas"]["ProgramPageItemResponse"][];
        };
        PrivateUserProfileResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /**
             * Format: uuid
             * @description OnlyDust user ID
             */
            id: string;
            /**
             * @description User location as in Github profile
             * @example Paris, France
             */
            location?: string;
            /**
             * @description User bio as in Github profile
             * @example Contributing to awesome open source projects.
             */
            bio?: string;
            /** @description User website as in Github profile */
            website?: string;
            contactEmail?: string;
            contacts?: components["schemas"]["ContactInformation"][];
            firstName?: string;
            lastName?: string;
            /** @enum {string} */
            allocatedTimeToContribute?: "NONE" | "LESS_THAN_ONE_DAY" | "ONE_TO_THREE_DAYS" | "GREATER_THAN_THREE_DAYS";
            /** @description Whether the user is looking for a job or not */
            isLookingForAJob?: boolean;
            /** @enum {string} */
            joiningReason?: "CONTRIBUTOR" | "MAINTAINER";
            /** @enum {string} */
            joiningGoal?: "LEARN" | "CHALLENGE" | "EARN" | "NOTORIETY";
            preferredLanguages?: components["schemas"]["LanguageResponse"][];
            preferredCategories?: components["schemas"]["ProjectCategoryResponse"][];
        };
        PayoutPreferencesItemResponse: {
            project: components["schemas"]["ProjectShortResponse"];
            billingProfile?: components["schemas"]["ShortBillingProfileResponse"];
        };
        ShortBillingProfileResponse: {
            /** Format: uuid */
            id: string;
            /** @enum {string} */
            type: "INDIVIDUAL" | "COMPANY" | "SELF_EMPLOYED";
            name: string;
            /** Format: int32 */
            rewardCount: number;
            /**
             * Format: int32
             * @description Number of rewards that are pending invoice
             */
            invoiceableRewardCount: number;
            /**
             * Format: int32
             * @description Like invoiceableRewardCount, except that it only counts rewards that can be requested by the caller
             */
            requestableRewardCount: number;
            invoiceMandateAccepted: boolean;
            enabled: boolean;
            pendingInvitationResponse?: boolean;
            /** @enum {string} */
            role: "ADMIN" | "MEMBER";
            /** @description True if any reward that is included in an invoice in this billing profile requires some payout info to be set in order to be payable. Always false when no pending rewards. */
            missingPayoutInfo: boolean;
            /** @description True if there is any reward belonging to this billing profile and its status is not VERIFIED. Always false when no pending rewards. */
            missingVerification: boolean;
            /** @description True if the billing profile verification process is blocked. */
            verificationBlocked: boolean;
            /** @description The payment limit for the current year (typically, $5000 for individuals) */
            currentYearPaymentLimit?: number;
            /** @description The total payments amount for the current year so far. */
            currentYearPaymentAmount?: number;
            /** @description True if the (individual) billing profile has reached the yearly limit. */
            individualLimitReached?: boolean;
        };
        OnboardingCompletionResponse: {
            /** @description True if the onboarding is completed */
            completed: boolean;
            /** @description Completion percentage of the onboarding */
            completion: number;
            /** @description True if the user has provided the verification information */
            verificationInformationProvided: boolean;
            /** @description True if the user has accepted the terms and conditions */
            termsAndConditionsAccepted: boolean;
            /** @description True if the user has provided its project preferences (categories, languages, ...) */
            projectPreferencesProvided: boolean;
            /** @description True if the user has completed its profile (bio, location, ...) */
            profileCompleted: boolean;
            /** @description True if the user has provided the payout information */
            payoutInformationProvided: boolean;
        };
        NotificationContributorInvoiceRejected: {
            invoiceName: string;
            rejectionReason: string;
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            billingProfileId: string;
        };
        NotificationContributorProjectApplicationAccepted: {
            projectName: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            projectSlug: string;
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            issueId: number;
            issueName: string;
        };
        NotificationContributorRewardCanceled: {
            /**
             * Format: uuid
             * @description OnlyDust reward ID
             */
            rewardId: string;
            projectName: string;
            amount: number;
            currencyCode: string;
        };
        NotificationContributorRewardReceived: {
            /**
             * Format: uuid
             * @description OnlyDust reward ID
             */
            rewardId: string;
            projectName: string;
            amount: number;
            currencyCode: string;
            sentByGithubLogin: string;
            /** Format: int32 */
            contributionCount: number;
        };
        NotificationContributorRewardsPaid: {
            /** Format: int32 */
            numberOfRewardPaid: number;
            totalAmountDollarsEquivalent: number;
        };
        NotificationGlobalBillingProfileVerificationFailed: {
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            billingProfileId: string;
            billingProfileName: string;
            /** @enum {string} */
            verificationStatus: "NOT_STARTED" | "STARTED" | "UNDER_REVIEW" | "VERIFIED" | "REJECTED" | "CLOSED";
        };
        NotificationMaintainerApplicationToReview: {
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            projectSlug: string;
            projectName: string;
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            applicantId: number;
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            issueId: number;
            issueName: string;
            applicationLogin: string;
        };
        NotificationMaintainerCommitteeApplicationCreated: {
            committeeName: string;
            /**
             * Format: uuid
             * @description OnlyDust committee ID
             */
            committeeId: string;
        };
        NotificationPageItemResponse: {
            /**
             * Format: uuid
             * @description Notification ID
             */
            id: string;
            /** Format: date-time */
            timestamp: string;
            /** @enum {string} */
            status: "UNREAD" | "READ";
            /** @enum {string} */
            type: "MAINTAINER_APPLICATION_TO_REVIEW" | "MAINTAINER_COMMITTEE_APPLICATION_CREATED" | "CONTRIBUTOR_INVOICE_REJECTED" | "CONTRIBUTOR_REWARD_CANCELED" | "CONTRIBUTOR_REWARD_RECEIVED" | "CONTRIBUTOR_REWARDS_PAID" | "CONTRIBUTOR_PROJECT_APPLICATION_ACCEPTED" | "GLOBAL_BILLING_PROFILE_VERIFICATION_FAILED";
            data: components["schemas"]["NotificationPageItemResponseData"];
        };
        NotificationPageItemResponseData: {
            maintainerApplicationToReview?: components["schemas"]["NotificationMaintainerApplicationToReview"];
            maintainerCommitteeApplicationCreated?: components["schemas"]["NotificationMaintainerCommitteeApplicationCreated"];
            contributorInvoiceRejected?: components["schemas"]["NotificationContributorInvoiceRejected"];
            contributorRewardCanceled?: components["schemas"]["NotificationContributorRewardCanceled"];
            contributorRewardReceived?: components["schemas"]["NotificationContributorRewardReceived"];
            contributorRewardsPaid?: components["schemas"]["NotificationContributorRewardsPaid"];
            contributorProjectApplicationAccepted?: components["schemas"]["NotificationContributorProjectApplicationAccepted"];
            globalBillingProfileVerificationFailed?: components["schemas"]["NotificationGlobalBillingProfileVerificationFailed"];
        };
        NotificationPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            notifications: components["schemas"]["NotificationPageItemResponse"][];
        };
        NotificationCountResponse: {
            /** Format: int32 */
            count: number;
        };
        NotificationSettingResponse: {
            channels: ("EMAIL" | "SUMMARY_EMAIL" | "IN_APP")[];
            /** @enum {string} */
            category: "MAINTAINER_PROJECT_CONTRIBUTOR" | "MAINTAINER_PROJECT_PROGRAM" | "CONTRIBUTOR_REWARD" | "CONTRIBUTOR_PROJECT" | "KYC_KYB_BILLING_PROFILE";
        };
        NotificationSettingsResponse: {
            notificationSettings: components["schemas"]["NotificationSettingResponse"][];
        };
        NotificationSettingsForProjectResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
            onGoodFirstIssueAdded: boolean;
        };
        ContributedReposResponse: {
            repos: components["schemas"]["ShortGithubRepoResponse"][];
        };
        CommitteeAssignmentLinkResponse: {
            project: components["schemas"]["ProjectShortResponse"];
            score?: number;
        };
        MyCommitteeAssignmentsResponse: {
            name: string;
            /** @enum {string} */
            status: "OPEN_TO_APPLICATIONS" | "OPEN_TO_VOTES" | "CLOSED";
            projectAssignments: components["schemas"]["CommitteeAssignmentLinkResponse"][];
        };
        CommitteeJuryVoteResponse: {
            /**
             * Format: uuid
             * @description OnlyDust committee criteria ID
             */
            criteriaId: string;
            criteria: string;
            /** Format: int32 */
            vote?: number;
        };
        CommitteeProjectInfosResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            name: string;
            logoUrl?: string;
            projectLeads?: components["schemas"]["RegisteredUserResponse"][];
            longDescription?: string;
            shortDescription?: string;
            last3monthsMetrics?: components["schemas"]["ProjectLast3MonthsMetricsResponse"];
        };
        CommitteeProjectQuestionResponse: {
            /** Format: uuid */
            id: string;
            question: string;
            answer?: string;
            required: boolean;
        };
        MyCommitteeAssignmentResponse: {
            score?: number;
            project: components["schemas"]["CommitteeProjectInfosResponse"];
            answers: components["schemas"]["CommitteeProjectQuestionResponse"][];
            votes?: components["schemas"]["CommitteeJuryVoteResponse"][];
        };
        ProjectLast3MonthsMetricsResponse: {
            /** Format: int32 */
            activeContributors?: number;
            /** Format: int32 */
            newContributors?: number;
            /** Format: int32 */
            contributorsRewarded?: number;
            /** Format: int32 */
            openIssues?: number;
            /** Format: int32 */
            contributionsCompleted?: number;
            amountSentInUsd?: number;
        };
        MyBillingProfilesResponse: {
            billingProfiles?: components["schemas"]["ShortBillingProfileResponse"][];
        };
        LanguagesResponse: {
            languages: components["schemas"]["LanguageResponse"][];
        };
        GithubIssueResponse: {
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            id: number;
            /**
             * Format: int64
             * @description Issue number
             * @example 6
             */
            number: number;
            /** @description Issue or pull request title on Github */
            title: string;
            /** @enum {string} */
            status: "OPEN" | "COMPLETED" | "CANCELLED";
            /** @description The public Github URL of the issue. */
            htmlUrl: string;
            repo: components["schemas"]["ShortGithubRepoResponse"];
            author: components["schemas"]["ContributorResponse"];
            /**
             * Format: date-time
             * @description When the issue was created.
             */
            createdAt: string;
            /**
             * Format: date-time
             * @description When the issue was cancelled or closed.
             */
            closedAt?: string;
            /** @description The body of the issue. */
            body?: string;
            /** Format: int32 */
            commentCount: number;
            /** @description The list of labels assigned to this issue */
            labels: components["schemas"]["GithubLabel"][];
            /** @description The list of applicants for this issue */
            applicants: components["schemas"]["GithubUserResponse"][];
            /** @description The list of assignees for this issue */
            assignees?: components["schemas"]["GithubUserResponse"][];
            languages: components["schemas"]["LanguageResponse"][];
            /** @enum {string} */
            githubAppInstallationStatus?: "NOT_INSTALLED" | "SUSPENDED" | "MISSING_PERMISSIONS" | "COMPLETE";
            /** Format: uri */
            githubAppInstallationPermissionsUpdateUrl?: string;
        };
        HackathonsListItemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust hackathon ID
             */
            id: string;
            /**
             * @description OnlyDust hackathon pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-hackathon
             */
            slug: string;
            /**
             * Format: int32
             * @description unique auto-incremented index of the hackathon
             */
            index: number;
            title: string;
            githubLabels?: string[];
            location: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            projects: components["schemas"]["ProjectLinkResponse"][];
            /** Format: int32 */
            subscriberCount: number;
            /** Format: int32 */
            issueCount: number;
            /** Format: int32 */
            openIssueCount: number;
        };
        HackathonsListResponse: {
            hackathons: components["schemas"]["HackathonsListItemResponse"][];
        };
        HackathonProjectIssuesResponse: {
            project: components["schemas"]["ProjectLinkResponse"];
            /** Format: int32 */
            issueCount?: number;
        };
        HackathonProjectsIssuesResponse: {
            /** @description List of languages used in the hackathon projects. Filters are not taken into account. */
            languages?: components["schemas"]["LanguageResponse"][];
            projects: components["schemas"]["HackathonProjectIssuesResponse"][];
        };
        HackathonsDetailsResponse: {
            /**
             * Format: uuid
             * @description OnlyDust hackathon ID
             */
            id: string;
            /**
             * @description OnlyDust hackathon pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-hackathon
             */
            slug: string;
            /**
             * Format: int32
             * @description unique auto-incremented index of the hackathon
             */
            index: number;
            title: string;
            githubLabels?: string[];
            location: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            projects: components["schemas"]["ProjectShortResponse"][];
            /** Format: int32 */
            subscriberCount: number;
            /** Format: int32 */
            issueCount: number;
            /** Format: int32 */
            openIssueCount: number;
            description: string;
            totalBudget: string;
            communityLinks: components["schemas"]["SimpleLink"][];
            links: components["schemas"]["SimpleLink"][];
            sponsors: components["schemas"]["SponsorResponse"][];
            events: components["schemas"]["HackathonsEventItemResponse"][];
            me: components["schemas"]["HackathonsDetailsResponseAllOfMe"];
        };
        HackathonsDetailsResponseAllOfMe: {
            hasRegistered: boolean;
        };
        HackathonsEventItemResponse: {
            name: string;
            subtitle: string;
            iconSlug: string;
            /** Format: date-time */
            startDate: string;
            /** Format: date-time */
            endDate: string;
            links: components["schemas"]["SimpleLink"][];
        };
        EcosystemPage: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            ecosystems: components["schemas"]["EcosystemResponse"][];
        };
        EcosystemProjectPageItemResponse: {
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            id: string;
            /**
             * @description OnlyDust project pretty ID that is computed from its name. This ID CAN change over time.
             * @example my-awesome-project
             */
            slug: string;
            /** @example Verkle Tries */
            name: string;
            /** @example A short project description */
            shortDescription: string;
            /**
             * @description Direct URL to project's logo image
             * @example https://onlydust-app-images.s3.eu-west-1.amazonaws.com/2529199823275297272.jpg
             */
            logoUrl?: string;
            topContributors?: components["schemas"]["GithubUserResponse"][];
            /** Format: int32 */
            contributorsCount?: number;
            languages: components["schemas"]["LanguageResponse"][];
        };
        EcosystemProjectPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            projects: components["schemas"]["EcosystemProjectPageItemResponse"][];
        };
        EcosystemContributorsPage: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            contributors: components["schemas"]["EcosystemContributorsPageItemResponse"][];
        };
        EcosystemContributorsPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /**
             * Format: int32
             * @description Rank of the contributor in the ecosystem, depending on sorting parameters. This is NOT the same as the global OnlyDust rank.
             * @example 1
             */
            dynamicRank: number;
            /**
             * Format: int32
             * @description User rank on OnlyDust (the lower, the better)
             * @example 42
             */
            globalRank: number;
            /** @enum {string} */
            globalRankCategory: "A" | "B" | "C" | "D" | "E" | "F";
            /**
             * Format: int32
             * @description Total number of contributions the contributor made on this ecosystem.
             * @example 22
             */
            contributionCount: number;
            /**
             * Format: int32
             * @description Total number of rewards the contributor got on this ecosystem.
             * @example 10
             */
            rewardCount: number;
            /** @description Total amount earned by the contributor in USD on this ecosystem. */
            totalEarnedUsd: number;
        };
        EcosystemArticle: {
            /** @example The title of the article */
            title: string;
            /**
             * Format: uri
             * @example https://onlydust.com/article
             */
            url: string;
            /**
             * Format: uri
             * @example https://onlydust.com/article-image.jpg
             */
            imageUrl: string;
            /** @example A short description of the article */
            description: string;
        };
        EcosystemDetailsResponse: {
            /**
             * Format: uuid
             * @description OnlyDust ecosystem ID
             */
            id: string;
            /**
             * @description OnlyDust ecosystem pretty ID that is computed from its name. This ID CAN change over time.
             * @example zama
             */
            slug: string;
            /**
             * @description Ecosystem name
             * @example Ethereum Foundation
             */
            name: string;
            /**
             * @description Ecosystem description
             * @example A short ecosystem description
             */
            description: string;
            banners: components["schemas"]["EcosystemShortResponseBanners"];
            relatedArticles?: components["schemas"]["EcosystemArticle"][];
        };
        EcosystemProjectCategoriesPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            projectCategories: components["schemas"]["ProjectCategoryResponse"][];
        };
        EcosystemLanguagesPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            languages: components["schemas"]["LanguageResponse"][];
        };
        CommitteeResponse: {
            /** Format: uuid */
            id: string;
            name: string;
            /** Format: date-time */
            applicationStartDate: string;
            /** Format: date-time */
            applicationEndDate: string;
            /** @enum {string} */
            status: "OPEN_TO_APPLICATIONS" | "OPEN_TO_VOTES" | "CLOSED";
            sponsor: components["schemas"]["SponsorResponse"];
        };
        CommitteeApplicationResponse: {
            /** Format: date-time */
            applicationStartDate: string;
            /** Format: date-time */
            applicationEndDate: string;
            projectQuestions: components["schemas"]["CommitteeProjectQuestionResponse"][];
            projectInfos?: components["schemas"]["CommitteeProjectInfosResponse"];
            /** @enum {string} */
            status: "OPEN_TO_APPLICATIONS" | "OPEN_TO_VOTES" | "CLOSED";
            hasStartedApplication: boolean;
        };
        BillingProfileCoworkerInvitation: {
            invitedBy?: components["schemas"]["ContributorResponse"];
            /** Format: date-time */
            invitedAt?: string;
            /** @enum {string} */
            role?: "ADMIN" | "MEMBER";
        };
        BillingProfileResponse: {
            /**
             * Format: uuid
             * @description Billing profile ID
             */
            id: string;
            /** @enum {string} */
            type: "INDIVIDUAL" | "COMPANY" | "SELF_EMPLOYED";
            /** @enum {string} */
            status: "NOT_STARTED" | "STARTED" | "UNDER_REVIEW" | "VERIFIED" | "REJECTED" | "CLOSED";
            name: string;
            /** @description The payment limit for the current year (typically, $5000 for individuals) */
            currentYearPaymentLimit?: number;
            /** @description The total payments amount for the current year so far. */
            currentYearPaymentAmount?: number;
            /** @description True if the (individual) billing profile has reached the yearly limit. */
            individualLimitReached?: boolean;
            /** @description True if the billing profile can be switched from company to self-employed type (eg. no other coworkers) */
            isSwitchableToSelfEmployed?: boolean;
            enabled: boolean;
            invoiceMandateAccepted: boolean;
            /** Format: int32 */
            rewardCount?: number;
            /** Format: int32 */
            invoiceableRewardCount?: number;
            /** @description True if any reward that is included in an invoice in this billing profile requires some payout info to be set in order to be payable. Always false when no pending rewards. */
            missingPayoutInfo: boolean;
            /** @description True if there is any reward belonging to this billing profile and its status is not VERIFIED. Always false when no pending rewards. */
            missingVerification: boolean;
            /** @description True if the billing profile verification process is blocked. */
            verificationBlocked: boolean;
            me: components["schemas"]["BillingProfileResponseMe"];
            kyc?: components["schemas"]["KYCResponse"];
            kyb?: components["schemas"]["KYBResponse"];
        };
        BillingProfileResponseMe: {
            invitation?: components["schemas"]["BillingProfileCoworkerInvitation"];
            /** @enum {string} */
            role?: "ADMIN" | "MEMBER";
            /** @description True if the billing profile can be deleted by the caller (eg. no invoice linked to it so far and the caller is admin) */
            canDelete: boolean;
            /** @description True if the caller can leave the billing profile (eg. no invoice linked to it so far and caller is not the last admin) */
            canLeave: boolean;
        };
        KYBResponse: {
            /** Format: uuid */
            id: string;
            name?: string;
            registrationNumber?: string;
            /** Format: date-time */
            registrationDate?: string;
            address?: string;
            country?: string;
            usEntity?: boolean;
            subjectToEuropeVAT?: boolean;
            euVATNumber?: string;
        };
        KYCResponse: {
            /** Format: uuid */
            id: string;
            firstName?: string;
            lastName?: string;
            /** Format: date-time */
            birthdate?: string;
            address?: string;
            country?: string;
            usCitizen?: boolean;
            /** @enum {string} */
            idDocumentType?: "PASSPORT" | "ID_CARD" | "RESIDENCE_PERMIT" | "DRIVER_LICENSE";
            idDocumentNumber?: string;
            /** Format: date-time */
            validUntil?: string;
            idDocumentCountryCode?: string;
        };
        BillingProfilePayoutInfoResponse: {
            hasValidPayoutSettings?: boolean;
            bankAccount?: components["schemas"]["BillingProfilePayoutInfoResponseBankAccount"];
            missingBankAccount?: boolean;
            /**
             * @description ETH wallet address or ENS
             * @example vitalik.eth
             */
            ethWallet?: string;
            missingEthWallet?: boolean;
            /** @example 655174969670325216845941694058677825196339598661 */
            optimismAddress?: string;
            missingOptimismWallet?: boolean;
            /** @example 75207196270256502255817105782338151356265417433430019227322186911337803076837 */
            aptosAddress?: string;
            missingAptosWallet?: boolean;
            /** @example 2439033442758812591743487931341975388992437896497635559722035508737856161688 */
            starknetAddress?: string;
            missingStarknetWallet?: boolean;
            /**
             * @description Stellar account public key, base-32 encoded
             * @example GBAIA5U6E3FSRUW55AXACIVGX2QR5JYAS74OWLED3S22EGXVYEHPLGPA
             */
            stellarAccountId?: string;
            missingStellarWallet?: boolean;
        };
        BillingProfileInvoicesPageItemResponse: {
            /** Format: uuid */
            id?: string;
            number?: string;
            /** Format: date-time */
            createdAt?: string;
            totalAfterTax?: components["schemas"]["NewMoney"];
            /** @enum {string} */
            status?: "DRAFT" | "PROCESSING" | "REJECTED" | "COMPLETE";
        };
        BillingProfileInvoicesPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            invoices: components["schemas"]["BillingProfileInvoicesPageItemResponse"][];
        };
        BillingProfileInvoiceableRewardsResponse: {
            rewards: components["schemas"]["MyRewardPageItemResponse"][];
        };
        BankAccountResponse: {
            accountNumber?: string;
            bic?: string;
        };
        BaseMoney: {
            amount: number;
            currency: components["schemas"]["ShortCurrencyResponse"];
            conversionRate: number;
        };
        ConvertibleMoney: {
            amount: number;
            currency: components["schemas"]["ShortCurrencyResponse"];
            prettyAmount: number;
            target: components["schemas"]["BaseMoney"];
        };
        DestinationAccountResponse: {
            bankAccount?: components["schemas"]["BankAccountResponse"];
            wallets?: components["schemas"]["WalletResponse"][];
        };
        InvoicePreviewResponse: {
            /** Format: uuid */
            id: string;
            number: string;
            /** Format: date-time */
            createdAt: string;
            /**
             * Format: date-time
             * @description 10 days after creation date
             */
            dueAt: string;
            /** @enum {string} */
            billingProfileType: "INDIVIDUAL" | "COMPANY" | "SELF_EMPLOYED";
            individualBillingProfile?: components["schemas"]["InvoicePreviewResponseIndividualBillingProfile"];
            companyBillingProfile?: components["schemas"]["InvoicePreviewResponseCompanyBillingProfile"];
            destinationAccounts: components["schemas"]["DestinationAccountResponse"];
            rewards?: components["schemas"]["InvoiceRewardItemResponse"][];
            totalBeforeTax?: components["schemas"]["NewMoney"];
            /** @description Tax rate in percentage. If the vatRegulationState is VAT_APPLICABLE, the tax rate is 20%, otherwise 0.  */
            taxRate?: number;
            totalTax?: components["schemas"]["NewMoney"];
            totalAfterTax?: components["schemas"]["NewMoney"];
            /** @description The conversion rate from USD to EUR */
            usdToEurConversionRate: number;
            totalAfterTaxPerCurrency?: components["schemas"]["NewMoney"][];
        };
        InvoicePreviewResponseCompanyBillingProfile: {
            registrationNumber: string;
            name: string;
            address: string;
            /** @enum {string} */
            vatRegulationState: "VAT_APPLICABLE" | "VAT_NOT_APPLICABLE_NON_UE" | "VAT_NOT_APPLICABLE_FRENCH_NOT_SUBJECT" | "VAT_REVERSE_CHARGE";
            euVATNumber?: string;
            /** @deprecated */
            country?: string;
            countryCode: string;
        };
        InvoicePreviewResponseIndividualBillingProfile: {
            firstName: string;
            lastName: string;
            address: string;
            /** @deprecated */
            country?: string;
            countryCode: string;
        };
        InvoiceRewardItemResponse: {
            /** Format: uuid */
            id: string;
            /** Format: date-time */
            date: string;
            projectName: string;
            amount: components["schemas"]["ConvertibleMoney"];
        };
        WalletResponse: {
            address?: string;
            network?: string;
        };
        BillingProfileCoworkersPageItemResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /**
             * Format: uuid
             * @description OnlyDust user ID
             */
            id?: string;
            /** @enum {string} */
            role: "ADMIN" | "MEMBER";
            /**
             * Format: date-time
             * @description Date when the coworker joined the billing profile. Null if the coworker didn't accept the invitation yet.
             */
            joinedAt?: string;
            /** Format: date-time */
            invitedAt: string;
            /** @description True if the coworker can be removed from the billing profile */
            removable?: boolean;
        };
        BillingProfileCoworkersPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            coworkers: components["schemas"]["BillingProfileCoworkersPageItemResponse"][];
        };
        BannerResponse: {
            /** Format: uuid */
            id: string;
            shortDescription: string;
            longDescription: string;
            title: string;
            subTitle: string;
            /** Format: date-time */
            date?: string;
            buttonIconSlug?: string;
            buttonText?: string;
            /** Format: uri */
            buttonLinkUrl?: string;
        };
        /** @description Github issue link response */
        GithubIssueLinkResponse: {
            /**
             * Format: int64
             * @description Github issue ID (databaseId)
             * @example 1678794252
             */
            id: number;
            /**
             * Format: int64
             * @description Issue number
             * @example 6
             */
            number: number;
            /** @description Issue or pull request title on Github */
            title: string;
            /** @enum {string} */
            status: "OPEN" | "COMPLETED" | "CANCELLED";
            /** @description The public Github URL of the issue. */
            htmlUrl: string;
            repo: components["schemas"]["ShortGithubRepoResponse"];
            author: components["schemas"]["ContributorResponse"];
        };
        ProjectApplicationPageItemResponse: {
            /**
             * Format: uuid
             * @description Application ID
             */
            id: string;
            project: components["schemas"]["ProjectLinkResponse"];
            issue: components["schemas"]["GithubIssueLinkResponse"];
            applicant: components["schemas"]["RankedContributorResponse"];
            /**
             * Format: date-time
             * @description When the application was created
             */
            receivedAt: string;
        };
        ProjectApplicationPageResponse: {
            /** Format: int32 */
            totalPageNumber: number;
            /** Format: int32 */
            totalItemNumber: number;
            hasMore: boolean;
            /**
             * Format: int32
             * @description if there is no next page, it will be equals to the last page
             */
            nextPageIndex: number;
            applications: components["schemas"]["ProjectApplicationPageItemResponse"][];
        };
        RankedContributorResponse: {
            /**
             * Format: int64
             * @description Github user ID (databaseId)
             * @example 595505
             */
            githubUserId: number;
            /**
             * @description User's Github login
             * @example ofux
             */
            login: string;
            /**
             * @description Direct URL to user's avatar image
             * @example https://avatars.githubusercontent.com/u/595505?v=4
             */
            avatarUrl: string;
            /** @description True if the user is registered on OnlyDust */
            isRegistered: boolean;
            /**
             * Format: int32
             * @description User rank on OnlyDust (the lower, the better)
             * @example 42
             */
            globalRank: number;
            /** @enum {string} */
            globalRankCategory: "A" | "B" | "C" | "D" | "E" | "F";
        };
        ProjectApplicationResponse: {
            /**
             * Format: uuid
             * @description Application ID
             */
            id: string;
            /**
             * Format: uuid
             * @description OnlyDust project ID
             */
            projectId: string;
            issue: components["schemas"]["GithubIssueLinkResponse"];
            applicant: components["schemas"]["ContributorResponse"];
            /** @enum {string} */
            origin: "GITHUB" | "MARKETPLACE";
            /** @description The applicant's motivation to work on the issue */
            motivation: string;
            /** @description The applicant's approach to solving the issue */
            problemSolvingApproach?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getProject: {
        parameters: {
            query?: {
                includeAllAvailableRepos?: boolean;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProjectRequest"];
            };
        };
        responses: {
            /** @description Update Project response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProjectResponse"];
                };
            };
            /** @description The project was updated successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateProjectResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    acceptInvitationToLeadProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The invitation was accepted successfully. The caller is now a leader of the project. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    claimProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description This project was successfully claimed. The caller is now a leader of the project. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PrivateUserProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    replaceMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description User profile updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateMyProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UserProfileUpdateRequest"];
            };
        };
        responses: {
            /** @description User profile updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyPayoutPreferences: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User payout preferences */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PayoutPreferencesItemResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    setMyPayoutPreferenceForProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PayoutPreferenceRequest"];
            };
        };
        responses: {
            /** @description Payout preference was set successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyNotificationSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettingsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    putMyNotificationSettings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationSettingsPutRequest"];
            };
        };
        responses: {
            /** @description Notification settings replaced */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    registerToHackathon: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hackathonId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully register. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getCommitteeAssignmentOnProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                committeeId: string;
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get my committee assignments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyCommitteeAssignmentResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    voteForCommitteeAssignment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                committeeId: string;
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["VoteForCommitteeAssignmentRequest"];
            };
        };
        responses: {
            /** @description Vote for committee assignment. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateProjectApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                applicationId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProjectApplicationUpdateRequest"];
            };
        };
        responses: {
            /** @description The application was updated successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    createUpdateApplicationForCommittee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                committeeId: string;
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CommitteeApplicationRequest"];
            };
        };
        responses: {
            /** @description Create/Update project application for committee */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateBillingProfileType: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfileTypeRequest"];
            };
        };
        responses: {
            /** @description User billing profile type updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getPayoutInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coworkers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfilePayoutInfoResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    setPayoutInfo: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfilePayoutInfoRequest"];
            };
        };
        responses: {
            /** @description Coworker invited */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    acceptOrDeclineInvoiceMandate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["InvoiceMandateRequest"];
            };
        };
        responses: {
            /** @description Invoice mandate accepted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    enableBillingProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfileEnableRequest"];
            };
        };
        responses: {
            /** @description Billing profile was disabled or activated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateCoworkerRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
                githubUserId: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateCoworkerRoleRequest"];
            };
        };
        responses: {
            /** @description Coworker updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    unallocateBudgetFromProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sponsorId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllocateRequest"];
            };
        };
        responses: {
            /** @description The funds have been allocated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    allocateBudgetToProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sponsorId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllocateRequest"];
            };
        };
        responses: {
            /** @description The funds have been allocated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjects: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Filter my projects */
                mine?: boolean;
                /** @description Full text search */
                search?: string;
                /** @description Filter on project tags */
                tags?: ("HOT_COMMUNITY" | "NEWBIES_WELCOME" | "LIKELY_TO_REWARD" | "WORK_IN_PROGRESS" | "FAST_AND_FURIOUS" | "BIG_WHALE" | "UPDATED_ROADMAP" | "HAS_GOOD_FIRST_ISSUES")[];
                /** @description Ecosystem filter */
                ecosystemSlugs?: string[];
                languageSlugs?: string[];
                categorySlugs?: string[];
                hasGoodFirstIssues?: boolean;
                /** @description Sort order */
                sort?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPageResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    createProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateProjectRequest"];
            };
        };
        responses: {
            /** @description Create Project response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateProjectResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectRewards: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Currency filter */
                currencies?: string[];
                /** @description Contributor filter */
                contributors?: number[];
                /** @description Date filter */
                fromDate?: string;
                /** @description Date filter */
                toDate?: string;
                /** @description Sort order */
                sort?: "REQUESTED_AT" | "CONTRIBUTION" | "AMOUNT" | "STATUS";
                direction?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of rewards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    createReward: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["RewardRequest"];
            };
        };
        responses: {
            /** @description Reward */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateRewardResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    addRewardableOtherWork: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddOtherWorkRequest"];
            };
        };
        responses: {
            /** @description Rewardable other work (issue) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardableItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    addRewardableOtherPullRequest: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddOtherPullRequestRequest"];
            };
        };
        responses: {
            /** @description Rewardable pull request */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardableItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    addRewardableOtherIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["AddOtherIssueRequest"];
            };
        };
        responses: {
            /** @description Rewardable issue */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardableItemResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    hideContributor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                githubUserId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contributor was hidden successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    showContributor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                githubUserId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The contributor was hidden successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    unassignContribution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                contributionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contribution was unassigned successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    uploadProjectLogo: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "image/png": {
                    /** Format: binary */
                    image?: string;
                };
                "image/jpeg": {
                    /** Format: binary */
                    image?: string;
                };
                "image/svg+xml": {
                    /** Format: binary */
                    image?: string;
                };
                "image/webp": {
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description Image uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadImageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    uploadAvatar: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "image/png": {
                    /** Format: binary */
                    image?: string;
                };
                "image/jpeg": {
                    /** Format: binary */
                    image?: string;
                };
                "image/svg+xml": {
                    /** Format: binary */
                    image?: string;
                };
                "image/webp": {
                    /** Format: binary */
                    image?: string;
                };
            };
        };
        responses: {
            /** @description Image uploaded */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadImageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    logoutMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Logout successful */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    acceptOrRejectCoworkerInvitation: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfileCoworkerInvitationUpdateRequest"];
            };
        };
        responses: {
            /** @description Invitation accepted/rejected */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    applyOnProject: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["ProjectApplicationCreateRequest"];
            };
        };
        responses: {
            /** @description The application was sent successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApplicationCreateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    createBillingProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfileRequest"];
            };
        };
        responses: {
            /** @description Billing profile created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfileCreateResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    downloadInvoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Pdf as blob */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": string;
                    "application/json": string;
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": components["schemas"]["OnlyDustError"];
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/pdf": components["schemas"]["OnlyDustError"];
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    uploadInvoice: {
        parameters: {
            query?: {
                fileName?: string;
            };
            header?: never;
            path: {
                billingProfileId: string;
                invoiceId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/pdf": {
                    /** Format: binary */
                    pdf?: string;
                };
            };
        };
        responses: {
            /** @description Invoice uploaded */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getCoworkers: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coworkers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfileCoworkersPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    inviteCoworker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BillingProfileCoworkerInvitationRequest"];
            };
        };
        responses: {
            /** @description Coworker invited */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    acceptProjectApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                applicationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The application was approved successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateIgnoredContributions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateProjectIgnoredContributionsRequest"];
            };
        };
        responses: {
            /** @description The list of ignored contributions was updated successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Minimalist user info */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetMeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    patchMe: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchMeContract"];
            };
        };
        responses: {
            /** @description The user was patched successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyNotifications: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                status?: "UNREAD" | "READ";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notifications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    patchMyNotificationsStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationsPatchRequest"];
            };
        };
        responses: {
            /** @description Notifications status updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    markAllInAppNotificationsAsRead: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All unread notifications has been marked as read */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyNotificationSettingsForProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationSettingsForProjectResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    patchMyNotificationSettingsForProject: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["NotificationSettingsForProjectPatchRequest"];
            };
        };
        responses: {
            /** @description Notification settings for project updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserContributions: {
        parameters: {
            query?: {
                /** @description Contribution type filter */
                types?: ("ISSUE" | "PULL_REQUEST" | "CODE_REVIEW")[];
                /** @description Contribution status filter */
                statuses?: ("IN_PROGRESS" | "COMPLETED" | "CANCELLED")[];
                /** @description Project filter */
                projects?: string[];
                /** @description Repository filter */
                repositories?: number[];
                /** @description Language filter */
                languages?: string[];
                /** @description Ecosystem filter */
                ecosystems?: string[];
                /** @description Include contributions in private projects */
                includePrivateProjects?: boolean;
                /** @description Contribution date filter */
                fromDate?: string;
                /** @description Contribution date filter */
                toDate?: string;
                /** @description Sorting field */
                sort?: "LAST_UPDATED_AT" | "PROJECT_REPO_NAME" | "GITHUB_NUMBER_TITLE" | "LINKS_COUNT";
                /** @description Sort direction */
                direction?: string;
                /** @description Page number */
                pageIndex?: number;
                /** @description Number of items returned by page */
                pageSize?: number;
            };
            header?: never;
            path: {
                githubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contribution list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemsPage: {
        parameters: {
            query?: {
                featured?: boolean;
                hidden?: boolean;
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of ecosystem */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemPageV2"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getAPIVersion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API Version */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetAPIVersion200Response"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                githubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserProfileResponseV2"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserProfileStats: {
        parameters: {
            query?: {
                ecosystem?: string;
            };
            header?: never;
            path: {
                githubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile stats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileStatsV2"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserProfileStatsPerLanguages: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                githubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile stats per languages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileLanguagePage"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserProfileStatsPerEcosystems: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                githubId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile stats per ecosystems */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserProfileEcosystemPage"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    searchContributors: {
        parameters: {
            query?: {
                /** @description Allows to trigger internal contributors search within the project's repos.  */
                projectId?: string;
                /** @description Allows to trigger internal contributors search within the provided repos.  */
                repoIds?: number[];
                /** @description login query */
                login?: string;
                /** @description If the number of internal contributors is greater than this value, the external search is not triggered. Default value is 5.  */
                maxInternalContributorCountToTriggerExternalSearch?: number;
                /** @description Max number of internal contributors that can be returned. Default value is 50.  */
                maxInternalContributorCountToReturn?: number;
                /** @description If true, only external search is performed. Default value is false.  */
                externalSearchOnly?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of contributors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorSearchResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getUserProfileByLogin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicUserProfileResponseV2"];
                };
            };
            /** @description User not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getSponsor: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                sponsorId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sponsor data */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SponsorDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getSponsorTransactionHistory: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                fromDate?: string;
                toDate?: string;
                /** @description Currency filter */
                currencies?: string[];
                /** @description Project filter */
                projects?: string[];
                /** @description Transaction type filter */
                types?: ("DEPOSIT" | "WITHDRAWAL" | "ALLOCATION" | "UNALLOCATION")[];
                /** @description Sort order */
                sort?: "DATE" | "TYPE" | "AMOUNT" | "PROJECT";
                direction?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                sponsorId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The sponsor transaction history */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TransactionHistoryPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getPublicActivity: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List lastest public activities */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PublicActivityPageResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectStats: {
        parameters: {
            query?: {
                /** @description Date filter */
                fromDate?: string;
                /** @description Date filter */
                toDate?: string;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project stats */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectStatsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectReward: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                rewardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reward details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The reward is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Reward not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    cancelReward: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                rewardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reward deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectRewardItemsPage: {
        parameters: {
            query?: {
                /** @description Page number */
                pageIndex?: number;
                /** @description Number of items returned by page */
                pageSize?: number;
            };
            header?: never;
            path: {
                projectId: string;
                rewardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reward details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardItemsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The reward is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Reward not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectRewardableContributions: {
        parameters: {
            query: {
                githubUserId: number;
                /** @description Page number */
                pageIndex: number;
                /** @description Number of items returned by page */
                pageSize: number;
                search?: string;
                type?: "ISSUE" | "PULL_REQUEST" | "CODE_REVIEW";
                status?: "IN_PROGRESS" | "COMPLETED" | "CANCELLED";
                include_ignored_items?: boolean;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rewardable contributions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardableItemsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getAllCompletedProjectRewardableContributions: {
        parameters: {
            query: {
                githubUserId: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Rewardable contributions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AllRewardableItemsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectPublicIssues: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Filter by hackathon */
                hackathonId?: string;
                /** @description Filter by languages */
                languageIds?: string[];
                /** @description Filter by statuses */
                statuses?: ("OPEN" | "COMPLETED" | "CANCELLED")[];
                /** @description When true, only issues that have been assigned are returned. When false, only issues that have not been assigned are returned. When null, issues are not filtered by this field.  */
                isAssigned?: boolean;
                /** @description When true, only issues that have been applied to are returned. When false, only issues that have not been applied to are returned. When null, issues are not filtered by this field.  */
                isApplied?: boolean;
                /** @description When true, only issues that are tagged as good first issues. When false, only issues that are not tagged as good first issues. When null, issues are not filtered by this field.  */
                isGoodFirstIssue?: boolean;
                /** @description When true, only issues that are included in at least one hackathon are returned. When false, only issues that are not included in any hackathon are returned. When null, issues are not filtered by this field.  */
                isIncludedInAnyHackathon?: boolean;
                /** @description Filter by title (case-insensitive search by title) */
                search?: string;
                /** @description Sort order */
                sort?: "CREATED_AT" | "CLOSED_AT";
                direction?: "ASC" | "DESC";
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project good first issues */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubIssuePageResponse"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectNewcomers: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project newcomers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectNewcomersPageResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectMostActiveContributors: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project most active contributors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectContributorActivityPageResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectChurnedContributors: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project churned contributors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectChurnedContributorsPageResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectStaledContributions: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project staled contributions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionPageResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectGoodFirstIssues: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project good first issues */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubIssuePageResponse"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectContributors: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Filter by login (case-insensitive search by login) */
                login?: string;
                /** @description Sort order */
                sort?: "LOGIN" | "CONTRIBUTION_COUNT" | "REWARD_COUNT" | "EARNED" | "TO_REWARD_COUNT";
                direction?: "ASC" | "DESC";
                showHidden?: boolean;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project contributors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributorsPageResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectContributions: {
        parameters: {
            query?: {
                /** @description Contribution type filter */
                types?: ("ISSUE" | "PULL_REQUEST" | "CODE_REVIEW")[];
                /** @description Contribution status filter */
                statuses?: ("IN_PROGRESS" | "COMPLETED" | "CANCELLED")[];
                /** @description Repository filter */
                repositories?: number[];
                /** @description Contribution date filter */
                fromDate?: string;
                /** @description Contribution date filter */
                toDate?: string;
                /** @description Contributor filter */
                contributorIds?: number[];
                /** @description Sorting field */
                sort?: "LAST_UPDATED_AT" | "REPO_NAME" | "CONTRIBUTOR_LOGIN" | "GITHUB_NUMBER_TITLE" | "LINKS_COUNT";
                /** @description Sort direction */
                direction?: string;
                /** @description Page number */
                pageIndex?: number;
                /** @description Number of items returned by page */
                pageSize?: number;
            };
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contribution list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getContribution: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
                contributionId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contribution details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributionDetailsResponse"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectBudgets: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                projectId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of budgets */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectBudgetsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectBySlug: {
        parameters: {
            query?: {
                includeAllAvailableRepos?: boolean;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectResponse"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getAllProjectCategories: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of project categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectCategoriesResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProgram: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                programId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Program details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProgramTransactions: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
                fromDate?: string;
                toDate?: string;
                /** @description Transaction types filter */
                types?: ("TRANSFER" | "REFUND")[];
                /** @description Search by project or sponsor name */
                search?: string;
            };
            header?: never;
            path: {
                programId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The program transactions */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramTransactionPageResponse"];
                    "text/csv": components["schemas"]["ProgramTransactionPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                    "text/csv": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                    "text/csv": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProgramTransactionsStats: {
        parameters: {
            query?: {
                fromDate?: string;
                toDate?: string;
                /** @description Transaction types filter */
                types?: ("TRANSFER" | "REFUND")[];
                /** @description Search by project or sponsor name */
                search?: string;
            };
            header?: never;
            path: {
                programId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Program transactions stats grouped by month */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramTransactionStatsListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyRewards: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Sort order */
                sort?: "REQUESTED_AT" | "CONTRIBUTION" | "AMOUNT" | "STATUS";
                direction?: "ASC" | "DESC";
                currencies?: string[];
                projects?: string[];
                fromDate?: string;
                toDate?: string;
                status?: "PENDING_SIGNUP" | "PENDING_CONTRIBUTOR" | "PENDING_BILLING_PROFILE" | "PENDING_COMPANY" | "PENDING_VERIFICATION" | "GEO_BLOCKED" | "INDIVIDUAL_LIMIT_REACHED" | "PAYOUT_INFO_MISSING" | "LOCKED" | "PENDING_REQUEST" | "PROCESSING" | "COMPLETE";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of rewards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyRewardsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyReward: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                rewardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reward details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The reward is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Reward not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyRewardItemsPage: {
        parameters: {
            query?: {
                /** @description Page number */
                pageIndex?: number;
                /** @description Number of items returned by page */
                pageSize?: number;
            };
            header?: never;
            path: {
                rewardId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Reward details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RewardItemsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The reward is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Reward not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyRewardingProjects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyRewardCurrencies: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Currency list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CurrencyListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getRecommendedProjects: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of recommended projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RecommendedProjectsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyPrograms: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Programs */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProgramsPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    updateMyGithubProfileData: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Github login, avatar and email updated */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    searchGithubUserOrganizations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Github user's organization list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubOrganizationResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getOnboardingCompletion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Onboarding completion */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnboardingCompletionResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyNotificationsCount: {
        parameters: {
            query?: {
                status?: "UNREAD" | "READ";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notifications Count */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NotificationCountResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyContributedRepos: {
        parameters: {
            query?: {
                /** @description Project filter */
                projects?: string[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Github repos list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContributedReposResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyContributedProjects: {
        parameters: {
            query?: {
                /** @description Repository filter */
                repositories?: number[];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getCommitteeAssignments: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                committeeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get my committee assignments. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyCommitteeAssignmentsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getMyBillingProfiles: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User billing profiles */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyBillingProfilesResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getAllLanguages: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of supported languages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LanguagesResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getIssue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                issueId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Issue */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GithubIssueResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getHackathons: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description hackathons list */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HackathonsListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getHackathonIssues: {
        parameters: {
            query?: {
                /** @description Filter by languages */
                languageIds?: string[];
                /** @description Filter by statuses */
                statuses?: ("OPEN" | "COMPLETED" | "CANCELLED")[];
                /** @description When true, only issues that have been assigned are returned. When false, only issues that have not been assigned are returned. When null, issues are not filtered by this field.  */
                isAssigned?: boolean;
                /** @description When true, only issues that have been applied to are returned. When false, only issues that have not been applied to are returned. When null, issues are not filtered by this field.  */
                isApplied?: boolean;
                /** @description When true, only issues that are tagged as good first issues. When false, only issues that are not tagged as good first issues. When null, issues are not filtered by this field.  */
                isGoodFirstIssue?: boolean;
                /** @description Filter by title (case-insensitive search by title) */
                search?: string;
            };
            header?: never;
            path: {
                hackathonId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of hackathon issue counts per project */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HackathonProjectsIssuesResponse"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getHackathonBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                hackathonSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description hackathon response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HackathonsDetailsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getAllEcosystems: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of ecosystem */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemPage"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemProjects: {
        parameters: {
            query?: {
                hasGoodFirstIssues?: boolean;
                featuredOnly?: boolean;
                pageIndex?: number;
                pageSize?: number;
                sortBy?: "RANK";
                tag?: "HOT_COMMUNITY" | "NEWBIES_WELCOME" | "LIKELY_TO_REWARD" | "WORK_IN_PROGRESS" | "FAST_AND_FURIOUS" | "BIG_WHALE" | "UPDATED_ROADMAP" | "HAS_GOOD_FIRST_ISSUES";
            };
            header?: never;
            path: {
                /** @description Ecosystem slug */
                ecosystemSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of ecosystem projects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemProjectPageResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemContributors: {
        parameters: {
            query: {
                /** @description Sort order */
                sort: "CONTRIBUTION_COUNT" | "TOTAL_EARNED";
                pageIndex: number;
                pageSize: number;
            };
            header?: never;
            path: {
                /** @description Ecosystem slug */
                ecosystemSlug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of ecosystem contributors */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemContributorsPage"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemBySlug: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ecosystem details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemDetailsResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemCategories: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ecosystem project categories */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemProjectCategoriesPageResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getEcosystemLanguages: {
        parameters: {
            query?: {
                pageIndex?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                slug: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ecosystem project languages */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EcosystemLanguagesPageResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getCommittee: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                committeeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Committee response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommitteeResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getCommitteeApplication: {
        parameters: {
            query?: {
                projectId?: string;
            };
            header?: never;
            path: {
                committeeId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Committee application response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CommitteeApplicationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getBillingProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Billing profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfileResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    deleteBillingProfile: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Billing profile was successfully deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getInvoices: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                /** @description Sort order */
                sort?: string;
                direction?: string;
            };
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of invoices linked to given billing profile */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfileInvoicesPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getInvoiceableRewards: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payable rewards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BillingProfileInvoiceableRewardsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    previewNewInvoiceForRewardIds: {
        parameters: {
            query: {
                rewardIds: string[];
            };
            header?: never;
            path: {
                billingProfileId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Invoice created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvoicePreviewResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getBanner: {
        parameters: {
            query?: {
                hiddenIgnoredByMe?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Banner */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BannerResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectsApplications: {
        parameters: {
            query: {
                pageIndex: number;
                pageSize: number;
                projectId?: string;
                issueId?: number;
                applicantId?: number;
                isApplicantProjectMember?: boolean;
                applicantLoginSearch?: string;
                sort?: "RECOMMANDATION_SCORE" | "LOGIN";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of applications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApplicationPageResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    getProjectApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                applicationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Application details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectApplicationResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    deleteProjectApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                applicationId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The application was deleted successfully. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    closeBanner: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                bannerId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Banner closed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
    removeCoworker: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                billingProfileId: string;
                githubUserId: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Coworker removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Forbidden. The project is not visible to the caller. */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Requested resource not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OnlyDustError"];
                };
            };
        };
    };
}
